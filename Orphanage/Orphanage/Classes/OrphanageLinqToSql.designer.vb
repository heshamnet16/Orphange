'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace OrphanageDB
	
	Partial Public Class Odb
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertOrphan(instance As OrphanageClasses.Orphan)
    End Sub
    Partial Private Sub UpdateOrphan(instance As OrphanageClasses.Orphan)
    End Sub
    Partial Private Sub DeleteOrphan(instance As OrphanageClasses.Orphan)
    End Sub
    Partial Private Sub InsertFamily(instance As OrphanageClasses.Family)
    End Sub
    Partial Private Sub UpdateFamily(instance As OrphanageClasses.Family)
    End Sub
    Partial Private Sub DeleteFamily(instance As OrphanageClasses.Family)
    End Sub
    Partial Private Sub InsertFather(instance As OrphanageClasses.Father)
    End Sub
    Partial Private Sub UpdateFather(instance As OrphanageClasses.Father)
    End Sub
    Partial Private Sub DeleteFather(instance As OrphanageClasses.Father)
    End Sub
    Partial Private Sub InsertMother(instance As OrphanageClasses.Mother)
    End Sub
    Partial Private Sub UpdateMother(instance As OrphanageClasses.Mother)
    End Sub
    Partial Private Sub DeleteMother(instance As OrphanageClasses.Mother)
    End Sub
    Partial Private Sub InsertBondsMan(instance As OrphanageClasses.BondsMan)
    End Sub
    Partial Private Sub UpdateBondsMan(instance As OrphanageClasses.BondsMan)
    End Sub
    Partial Private Sub DeleteBondsMan(instance As OrphanageClasses.BondsMan)
    End Sub
    Partial Private Sub InsertSupporter(instance As OrphanageClasses.Supporter)
    End Sub
    Partial Private Sub UpdateSupporter(instance As OrphanageClasses.Supporter)
    End Sub
    Partial Private Sub DeleteSupporter(instance As OrphanageClasses.Supporter)
    End Sub
    Partial Private Sub InsertName(instance As OrphanageClasses.Name)
    End Sub
    Partial Private Sub UpdateName(instance As OrphanageClasses.Name)
    End Sub
    Partial Private Sub DeleteName(instance As OrphanageClasses.Name)
    End Sub
    Partial Private Sub InsertAddress(instance As OrphanageClasses.Address)
    End Sub
    Partial Private Sub UpdateAddress(instance As OrphanageClasses.Address)
    End Sub
    Partial Private Sub DeleteAddress(instance As OrphanageClasses.Address)
    End Sub
    Partial Private Sub InsertHealthy(instance As OrphanageClasses.Healthy)
    End Sub
    Partial Private Sub UpdateHealthy(instance As OrphanageClasses.Healthy)
    End Sub
    Partial Private Sub DeleteHealthy(instance As OrphanageClasses.Healthy)
    End Sub
    Partial Private Sub InsertStudy(instance As OrphanageClasses.Study)
    End Sub
    Partial Private Sub UpdateStudy(instance As OrphanageClasses.Study)
    End Sub
    Partial Private Sub DeleteStudy(instance As OrphanageClasses.Study)
    End Sub
    Partial Private Sub InsertUser(instance As OrphanageClasses.User)
    End Sub
    Partial Private Sub UpdateUser(instance As OrphanageClasses.User)
    End Sub
    Partial Private Sub DeleteUser(instance As OrphanageClasses.User)
    End Sub
    Partial Private Sub InsertBox(instance As OrphanageClasses.Box)
    End Sub
    Partial Private Sub UpdateBox(instance As OrphanageClasses.Box)
    End Sub
    Partial Private Sub DeleteBox(instance As OrphanageClasses.Box)
    End Sub
    Partial Private Sub InsertBill(instance As OrphanageClasses.Bill)
    End Sub
    Partial Private Sub UpdateBill(instance As OrphanageClasses.Bill)
    End Sub
    Partial Private Sub DeleteBill(instance As OrphanageClasses.Bill)
    End Sub
    Partial Private Sub InsertBail(instance As OrphanageClasses.Bail)
    End Sub
    Partial Private Sub UpdateBail(instance As OrphanageClasses.Bail)
    End Sub
    Partial Private Sub DeleteBail(instance As OrphanageClasses.Bail)
    End Sub
    Partial Private Sub InsertTransform(instance As OrphanageClasses.Transform)
    End Sub
    Partial Private Sub UpdateTransform(instance As OrphanageClasses.Transform)
    End Sub
    Partial Private Sub DeleteTransform(instance As OrphanageClasses.Transform)
    End Sub
    Partial Private Sub InsertUnOrphan(instance As OrphanageClasses.UnOrphan)
    End Sub
    Partial Private Sub UpdateUnOrphan(instance As OrphanageClasses.UnOrphan)
    End Sub
    Partial Private Sub DeleteUnOrphan(instance As OrphanageClasses.UnOrphan)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.Orphanage.My.MySettings.Default.OrphansDBConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Orphans() As System.Data.Linq.Table(Of OrphanageClasses.Orphan)
			Get
				Return Me.GetTable(Of OrphanageClasses.Orphan)
			End Get
		End Property
		
		Public ReadOnly Property Families() As System.Data.Linq.Table(Of OrphanageClasses.Family)
			Get
				Return Me.GetTable(Of OrphanageClasses.Family)
			End Get
		End Property
		
		Public ReadOnly Property Fathers() As System.Data.Linq.Table(Of OrphanageClasses.Father)
			Get
				Return Me.GetTable(Of OrphanageClasses.Father)
			End Get
		End Property
		
		Public ReadOnly Property Mothers() As System.Data.Linq.Table(Of OrphanageClasses.Mother)
			Get
				Return Me.GetTable(Of OrphanageClasses.Mother)
			End Get
		End Property
		
		Public ReadOnly Property BondsMans() As System.Data.Linq.Table(Of OrphanageClasses.BondsMan)
			Get
				Return Me.GetTable(Of OrphanageClasses.BondsMan)
			End Get
		End Property
		
		Public ReadOnly Property Supporters() As System.Data.Linq.Table(Of OrphanageClasses.Supporter)
			Get
				Return Me.GetTable(Of OrphanageClasses.Supporter)
			End Get
		End Property
		
		Public ReadOnly Property Names() As System.Data.Linq.Table(Of OrphanageClasses.Name)
			Get
				Return Me.GetTable(Of OrphanageClasses.Name)
			End Get
		End Property
		
		Public ReadOnly Property Addresses() As System.Data.Linq.Table(Of OrphanageClasses.Address)
			Get
				Return Me.GetTable(Of OrphanageClasses.Address)
			End Get
		End Property
		
		Public ReadOnly Property Healthies() As System.Data.Linq.Table(Of OrphanageClasses.Healthy)
			Get
				Return Me.GetTable(Of OrphanageClasses.Healthy)
			End Get
		End Property
		
		Public ReadOnly Property Studies() As System.Data.Linq.Table(Of OrphanageClasses.Study)
			Get
				Return Me.GetTable(Of OrphanageClasses.Study)
			End Get
		End Property
		
		Public ReadOnly Property Users() As System.Data.Linq.Table(Of OrphanageClasses.User)
			Get
				Return Me.GetTable(Of OrphanageClasses.User)
			End Get
		End Property
		
		Public ReadOnly Property Boxes() As System.Data.Linq.Table(Of OrphanageClasses.Box)
			Get
				Return Me.GetTable(Of OrphanageClasses.Box)
			End Get
		End Property
		
		Public ReadOnly Property Bills() As System.Data.Linq.Table(Of OrphanageClasses.Bill)
			Get
				Return Me.GetTable(Of OrphanageClasses.Bill)
			End Get
		End Property
		
		Public ReadOnly Property Bails() As System.Data.Linq.Table(Of OrphanageClasses.Bail)
			Get
				Return Me.GetTable(Of OrphanageClasses.Bail)
			End Get
		End Property
		
		Public ReadOnly Property Transforms() As System.Data.Linq.Table(Of OrphanageClasses.Transform)
			Get
				Return Me.GetTable(Of OrphanageClasses.Transform)
			End Get
		End Property
		
		Public ReadOnly Property UnOrphans() As System.Data.Linq.Table(Of OrphanageClasses.UnOrphan)
			Get
				Return Me.GetTable(Of OrphanageClasses.UnOrphan)
			End Get
		End Property
	End Class
End Namespace

Namespace OrphanageClasses
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Orphans")>  _
	Partial Public Class Orphan
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name_ID As Integer
		
        Private _Age As System.Nullable(Of Integer)

        Private _Birthday As Date

        Private _IsExcluded As System.Nullable(Of Boolean)

        Private _Education_ID As System.Nullable(Of Integer)

        Private _Health_ID As System.Nullable(Of Integer)

        Private _FullPhoto() As Byte

        Private _FacePhoto() As Byte

        Private _IdentityNumber As System.Nullable(Of ULong)

        Private _FootSize As System.Nullable(Of Byte)

        Private _Weight As System.Nullable(Of Byte)

        Private _Tallness As System.Nullable(Of Byte)

        Private _Family_ID As Integer

        Private _IsBailed As Boolean

        Private _Bail_ID As System.Nullable(Of Integer)

        Private _BondsMan_ID As Integer

        Private _Suppoter_ID As System.Nullable(Of Integer)

        Private _Color_Mark As System.Nullable(Of Long)

        Private _User_ID As Integer

        Private _RegDate As Date

        Private _Story As String

        Private _FingerPrint() As Byte

        Private _BondsManRelationship As String

        Private _BirthCertificate_Photo() As Byte

        Private _FamilyCardPagePhoto() As Byte

        Private _Gender As String

        Private _Kaid As System.Nullable(Of Integer)

        Private _BirthPlace As String

        Private _Bills As EntitySet(Of Bill)

        Private _Family As EntityRef(Of Family)

        Private _Name As EntityRef(Of Name)

        Private _Study As EntityRef(Of Study)

        Private _Healthy As EntityRef(Of Healthy)

        Private _Bail As EntityRef(Of Bail)

        Private _BondsMan As EntityRef(Of BondsMan)

        Private _Supporter As EntityRef(Of Supporter)

        Private _User As EntityRef(Of User)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnName_IDChanging(value As Integer)
        End Sub
        Partial Private Sub OnName_IDChanged()
        End Sub
        Partial Private Sub OnAgeChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnAgeChanged()
        End Sub
        Partial Private Sub OnBirthdayChanging(value As Date)
        End Sub
        Partial Private Sub OnBirthdayChanged()
        End Sub
        Partial Private Sub OnIsExcludedChanging(value As System.Nullable(Of Boolean))
        End Sub
        Partial Private Sub OnIsExcludedChanged()
        End Sub
        Partial Private Sub OnEducation_IDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnEducation_IDChanged()
        End Sub
        Partial Private Sub OnHealth_IDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnHealth_IDChanged()
        End Sub
        Partial Private Sub OnFullPhotoChanging(value As Byte())
        End Sub
        Partial Private Sub OnFullPhotoChanged()
        End Sub
        Partial Private Sub OnFacePhotoChanging(value As Byte())
        End Sub
        Partial Private Sub OnFacePhotoChanged()
        End Sub
        Partial Private Sub OnIdentityNumberChanging(value As System.Nullable(Of ULong))
        End Sub
        Partial Private Sub OnIdentityNumberChanged()
        End Sub
        Partial Private Sub OnFootSizeChanging(value As System.Nullable(Of Byte))
        End Sub
        Partial Private Sub OnFootSizeChanged()
        End Sub
        Partial Private Sub OnWeightChanging(value As System.Nullable(Of Byte))
        End Sub
        Partial Private Sub OnWeightChanged()
        End Sub
        Partial Private Sub OnTallnessChanging(value As System.Nullable(Of Byte))
        End Sub
        Partial Private Sub OnTallnessChanged()
        End Sub
        Partial Private Sub OnFamily_IDChanging(value As Integer)
        End Sub
        Partial Private Sub OnFamily_IDChanged()
        End Sub
        Partial Private Sub OnIsBailedChanging(value As Boolean)
        End Sub
        Partial Private Sub OnIsBailedChanged()
        End Sub
        Partial Private Sub OnBail_IDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnBail_IDChanged()
        End Sub
        Partial Private Sub OnBondsMan_IDChanging(value As Integer)
        End Sub
        Partial Private Sub OnBondsMan_IDChanged()
        End Sub
        Partial Private Sub OnSuppoter_IDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnSuppoter_IDChanged()
        End Sub
        Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
        End Sub
        Partial Private Sub OnColor_MarkChanged()
        End Sub
        Partial Private Sub OnUser_IDChanging(value As Integer)
        End Sub
        Partial Private Sub OnUser_IDChanged()
        End Sub
        Partial Private Sub OnRegDateChanging(value As Date)
        End Sub
        Partial Private Sub OnRegDateChanged()
        End Sub
        Partial Private Sub OnStoryChanging(value As String)
        End Sub
        Partial Private Sub OnStoryChanged()
        End Sub
        Partial Private Sub OnFingerPrintChanging(value As Byte())
        End Sub
        Partial Private Sub OnFingerPrintChanged()
        End Sub
        Partial Private Sub OnBondsManRelationshipChanging(value As String)
        End Sub
        Partial Private Sub OnBondsManRelationshipChanged()
        End Sub
        Partial Private Sub OnBirthCertificate_PhotoChanging(value As Byte())
        End Sub
        Partial Private Sub OnBirthCertificate_PhotoChanged()
        End Sub
        Partial Private Sub OnFamilyCardPagePhotoChanging(value As Byte())
        End Sub
        Partial Private Sub OnFamilyCardPagePhotoChanged()
        End Sub
        Partial Private Sub OnGenderChanging(value As String)
        End Sub
        Partial Private Sub OnGenderChanged()
        End Sub
        Partial Private Sub OnKaidChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnKaidChanged()
        End Sub
        Partial Private Sub OnBirthPlaceChanging(value As String)
        End Sub
        Partial Private Sub OnBirthPlaceChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
            Me._Family = CType(Nothing, EntityRef(Of Family))
            Me._Name = CType(Nothing, EntityRef(Of Name))
            Me._Study = CType(Nothing, EntityRef(Of Study))
            Me._Healthy = CType(Nothing, EntityRef(Of Healthy))
            Me._Bail = CType(Nothing, EntityRef(Of Bail))
            Me._BondsMan = CType(Nothing, EntityRef(Of BondsMan))
            Me._Supporter = CType(Nothing, EntityRef(Of Supporter))
            Me._User = CType(Nothing, EntityRef(Of User))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(value As Integer)
                If ((Me._ID = value) _
                   = False) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Name", Storage:="_Name_ID")> _
        Public Property Name_ID() As Integer
            Get
                Return Me._Name_ID
            End Get
            Set(value As Integer)
                If ((Me._Name_ID = value) _
                   = False) Then
                    Me.OnName_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name_ID = value
                    Me.SendPropertyChanged("Name_ID")
                    Me.OnName_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", Expression:="DATEDIFF(YEAR, Birthday, GETDATE())")> _
        Public Property Age() As System.Nullable(Of Integer)
            Get
                Return Me._Age
            End Get
            Set(value As System.Nullable(Of Integer))
                If (Me._Age.Equals(value) = False) Then
                    Me.OnAgeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Age = value
                    Me.SendPropertyChanged("Age")
                    Me.OnAgeChanged()
                End If
            End Set
        End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthday")>  _
		Public Property Birthday() As Date
			Get
				Return Me._Birthday
			End Get
			Set
				If ((Me._Birthday = value)  _
							= false) Then
					Me.OnBirthdayChanging(value)
					Me.SendPropertyChanging
					Me._Birthday = value
					Me.SendPropertyChanged("Birthday")
					Me.OnBirthdayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsExcluded")>  _
		Public Property IsExcluded() As System.Nullable(Of Boolean)
			Get
				Return Me._IsExcluded
			End Get
			Set
				If (Me._IsExcluded.Equals(value) = false) Then
					Me.OnIsExcludedChanging(value)
					Me.SendPropertyChanging
					Me._IsExcluded = value
					Me.SendPropertyChanged("IsExcluded")
					Me.OnIsExcludedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Education_ID")>  _
		Public Property Education_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Education_ID
			End Get
			Set
				If (Me._Education_ID.Equals(value) = false) Then
					If Me._Study.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnEducation_IDChanging(value)
					Me.SendPropertyChanging
					Me._Education_ID = value
					Me.SendPropertyChanged("Education_ID")
					Me.OnEducation_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Health_ID")>  _
		Public Property Health_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Health_ID
			End Get
			Set
				If (Me._Health_ID.Equals(value) = false) Then
					If Me._Healthy.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHealth_IDChanging(value)
					Me.SendPropertyChanging
					Me._Health_ID = value
					Me.SendPropertyChanged("Health_ID")
					Me.OnHealth_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullPhoto", DbType:="varbinary(MAX)")>  _
		Public Property FullPhoto() As Byte()
			Get
				Return Me._FullPhoto
			End Get
			Set
				If (Object.Equals(Me._FullPhoto, value) = false) Then
					Me.OnFullPhotoChanging(value)
					Me.SendPropertyChanging
					Me._FullPhoto = value
					Me.SendPropertyChanged("FullPhoto")
					Me.OnFullPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FacePhoto", DbType:="varbinary(MAX)")>  _
		Public Property FacePhoto() As Byte()
			Get
				Return Me._FacePhoto
			End Get
			Set
				If (Object.Equals(Me._FacePhoto, value) = false) Then
					Me.OnFacePhotoChanging(value)
					Me.SendPropertyChanging
					Me._FacePhoto = value
					Me.SendPropertyChanged("FacePhoto")
					Me.OnFacePhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityNumber")>  _
		Public Property IdentityNumber() As System.Nullable(Of ULong)
			Get
				Return Me._IdentityNumber
			End Get
			Set
				If (Me._IdentityNumber.Equals(value) = false) Then
					Me.OnIdentityNumberChanging(value)
					Me.SendPropertyChanging
					Me._IdentityNumber = value
					Me.SendPropertyChanged("IdentityNumber")
					Me.OnIdentityNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FootSize")>  _
		Public Property FootSize() As System.Nullable(Of Byte)
			Get
				Return Me._FootSize
			End Get
			Set
				If (Me._FootSize.Equals(value) = false) Then
					Me.OnFootSizeChanging(value)
					Me.SendPropertyChanging
					Me._FootSize = value
					Me.SendPropertyChanged("FootSize")
					Me.OnFootSizeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight")>  _
		Public Property Weight() As System.Nullable(Of Byte)
			Get
				Return Me._Weight
			End Get
			Set
				If (Me._Weight.Equals(value) = false) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tallness")>  _
		Public Property Tallness() As System.Nullable(Of Byte)
			Get
				Return Me._Tallness
			End Get
			Set
				If (Me._Tallness.Equals(value) = false) Then
					Me.OnTallnessChanging(value)
					Me.SendPropertyChanging
					Me._Tallness = value
					Me.SendPropertyChanged("Tallness")
					Me.OnTallnessChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Family_ID")>  _
		Public Property Family_ID() As Integer
			Get
				Return Me._Family_ID
			End Get
			Set
				If ((Me._Family_ID = value)  _
							= false) Then
					If Me._Family.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFamily_IDChanging(value)
					Me.SendPropertyChanging
					Me._Family_ID = value
					Me.SendPropertyChanged("Family_ID")
					Me.OnFamily_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsBailed")>  _
		Public Property IsBailed() As Boolean
			Get
				Return Me._IsBailed
			End Get
			Set
				If ((Me._IsBailed = value)  _
							= false) Then
					Me.OnIsBailedChanging(value)
					Me.SendPropertyChanging
					Me._IsBailed = value
					Me.SendPropertyChanged("IsBailed")
					Me.OnIsBailedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bail_ID")>  _
		Public Property Bail_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Bail_ID
			End Get
			Set
				If (Me._Bail_ID.Equals(value) = false) Then
					If Me._Bail.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBail_IDChanging(value)
					Me.SendPropertyChanging
					Me._Bail_ID = value
					Me.SendPropertyChanged("Bail_ID")
					Me.OnBail_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BondsMan_ID")>  _
		Public Property BondsMan_ID() As Integer
			Get
				Return Me._BondsMan_ID
			End Get
			Set
				If ((Me._BondsMan_ID = value)  _
							= false) Then
					If Me._BondsMan.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBondsMan_IDChanging(value)
					Me.SendPropertyChanging
					Me._BondsMan_ID = value
					Me.SendPropertyChanged("BondsMan_ID")
					Me.OnBondsMan_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Supporter_ID", Storage:="_Suppoter_ID")>  _
		Public Property Suppoter_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Suppoter_ID
			End Get
			Set
				If (Me._Suppoter_ID.Equals(value) = false) Then
					Me.OnSuppoter_IDChanging(value)
					Me.SendPropertyChanging
					Me._Suppoter_ID = value
					Me.SendPropertyChanged("Suppoter_ID")
					Me.OnSuppoter_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Story")>  _
		Public Property Story() As String
			Get
				Return Me._Story
			End Get
			Set
				If (String.Equals(Me._Story, value) = false) Then
					Me.OnStoryChanging(value)
					Me.SendPropertyChanging
					Me._Story = value
					Me.SendPropertyChanged("Story")
					Me.OnStoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FingerPrint", DbType:="varbinary(MAX)")>  _
		Public Property FingerPrint() As Byte()
			Get
				Return Me._FingerPrint
			End Get
			Set
				If (Object.Equals(Me._FingerPrint, value) = false) Then
					Me.OnFingerPrintChanging(value)
					Me.SendPropertyChanging
					Me._FingerPrint = value
					Me.SendPropertyChanged("FingerPrint")
					Me.OnFingerPrintChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="BondsManRel", Storage:="_BondsManRelationship", CanBeNull:=false)>  _
		Public Property BondsManRelationship() As String
			Get
				Return Me._BondsManRelationship
			End Get
			Set
				If (String.Equals(Me._BondsManRelationship, value) = false) Then
					Me.OnBondsManRelationshipChanging(value)
					Me.SendPropertyChanging
					Me._BondsManRelationship = value
					Me.SendPropertyChanged("BondsManRelationship")
					Me.OnBondsManRelationshipChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthCertificate_Photo", DbType:="varbinary(MAX)")>  _
		Public Property BirthCertificate_Photo() As Byte()
			Get
				Return Me._BirthCertificate_Photo
			End Get
			Set
				If (Object.Equals(Me._BirthCertificate_Photo, value) = false) Then
					Me.OnBirthCertificate_PhotoChanging(value)
					Me.SendPropertyChanging
					Me._BirthCertificate_Photo = value
					Me.SendPropertyChanged("BirthCertificate_Photo")
					Me.OnBirthCertificate_PhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyCardPagePhoto", DbType:="varbinary(MAX)")>  _
		Public Property FamilyCardPagePhoto() As Byte()
			Get
				Return Me._FamilyCardPagePhoto
			End Get
			Set
				If (Object.Equals(Me._FamilyCardPagePhoto, value) = false) Then
					Me.OnFamilyCardPagePhotoChanging(value)
					Me.SendPropertyChanging
					Me._FamilyCardPagePhoto = value
					Me.SendPropertyChanged("FamilyCardPagePhoto")
					Me.OnFamilyCardPagePhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", CanBeNull:=false)>  _
		Public Property Gender() As String
			Get
				Return Me._Gender
			End Get
			Set
				If (String.Equals(Me._Gender, value) = false) Then
					Me.OnGenderChanging(value)
					Me.SendPropertyChanging
					Me._Gender = value
					Me.SendPropertyChanged("Gender")
					Me.OnGenderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kaid")>  _
		Public Property Kaid() As System.Nullable(Of Integer)
			Get
				Return Me._Kaid
			End Get
			Set
				If (Me._Kaid.Equals(value) = false) Then
					Me.OnKaidChanging(value)
					Me.SendPropertyChanging
					Me._Kaid = value
					Me.SendPropertyChanged("Kaid")
					Me.OnKaidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Birthplace", Storage:="_BirthPlace")>  _
		Public Property BirthPlace() As String
			Get
				Return Me._BirthPlace
			End Get
			Set
				If (String.Equals(Me._BirthPlace, value) = false) Then
					Me.OnBirthPlaceChanging(value)
					Me.SendPropertyChanging
					Me._BirthPlace = value
					Me.SendPropertyChanged("BirthPlace")
					Me.OnBirthPlaceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Orphan_Bill", Storage:="_Bills", ThisKey:="ID", OtherKey:="Orphan_ID")>  _
		Public Property Bills() As EntitySet(Of Bill)
			Get
				Return Me._Bills
			End Get
			Set
				Me._Bills.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_Orphan", Storage:="_Family", ThisKey:="Family_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Family() As Family
			Get
				Return Me._Family.Entity
			End Get
			Set
				Dim previousValue As Family = Me._Family.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Family.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Family.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Family.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Family_ID = value.ID
					Else
						Me._Family_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Family")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Orphan", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Study_Orphan", Storage:="_Study", ThisKey:="Education_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Study() As Study
			Get
				Return Me._Study.Entity
			End Get
			Set
				Dim previousValue As Study = Me._Study.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Study.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Study.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Study.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Education_ID = value.ID
					Else
						Me._Education_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Study")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Healthy_Orphan", Storage:="_Healthy", ThisKey:="Health_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Healthy() As Healthy
			Get
				Return Me._Healthy.Entity
			End Get
			Set
				Dim previousValue As Healthy = Me._Healthy.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Healthy.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Healthy.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Healthy.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Health_ID = value.ID
					Else
						Me._Health_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Healthy")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Orphan", Storage:="_Bail", ThisKey:="Bail_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Bail() As Bail
			Get
				Return Me._Bail.Entity
			End Get
			Set
				Dim previousValue As Bail = Me._Bail.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Bail.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Bail.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Bail.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Bail_ID = value.ID
					Else
						Me._Bail_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Bail")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BondsMan_Orphan", Storage:="_BondsMan", ThisKey:="BondsMan_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property BondsMan() As BondsMan
			Get
				Return Me._BondsMan.Entity
			End Get
			Set
				Dim previousValue As BondsMan = Me._BondsMan.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BondsMan.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BondsMan.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._BondsMan.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._BondsMan_ID = value.ID
					Else
						Me._BondsMan_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("BondsMan")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supporter_Orphan", Storage:="_Supporter", ThisKey:="Suppoter_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Supporter() As Supporter
			Get
				Return Me._Supporter.Entity
			End Get
			Set
				Dim previousValue As Supporter = Me._Supporter.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Supporter.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Supporter.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._Supporter.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._Suppoter_ID = value.ID
					Else
						Me._Suppoter_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Supporter")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Orphan", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Orphans.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orphans.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Orphan = Me
		End Sub
		
		Private Sub detach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Orphan = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Famlies")>  _
	Partial Public Class Family
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Mother_ID As Integer
		
		Private _Father_ID As Integer
		
		Private _IsBaild As Boolean
		
		Private _Baild_ID As System.Nullable(Of Integer)
		
		Private _FamilyCardPhoto() As Byte
		
		Private _FamilyCardPhotoP2() As Byte
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _Residece_Sate As String
		
		Private _Residenc_Type As String
		
		Private _IsRefugee As Boolean
		
		Private _FamilyCard_Num As String
		
		Private _Finncial_Sate As String
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Color_Mark As System.Nullable(Of Long)
		
		Private _Address_ID2 As System.Nullable(Of Integer)
		
		Private _IsExcluded As Boolean
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Bills As EntitySet(Of Bill)
		
		Private _UnOrphans As EntitySet(Of UnOrphan)
		
		Private _Father As EntityRef(Of Father)
		
		Private _Mother As EntityRef(Of Mother)
		
		Private _Bail As EntityRef(Of Bail)
		
		Private _Address As EntityRef(Of Address)
		
		Private _User As EntityRef(Of User)
		
		Private _Address1 As EntityRef(Of Address)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMother_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMother_IDChanged()
    End Sub
    Partial Private Sub OnFather_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFather_IDChanged()
    End Sub
    Partial Private Sub OnIsBaildChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsBaildChanged()
    End Sub
    Partial Private Sub OnBaild_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBaild_IDChanged()
    End Sub
    Partial Private Sub OnFamilyCardPhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnFamilyCardPhotoChanged()
    End Sub
    Partial Private Sub OnFamilyCardPhotoP2Changing(value As Byte())
    End Sub
    Partial Private Sub OnFamilyCardPhotoP2Changed()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnResidece_SateChanging(value As String)
    End Sub
    Partial Private Sub OnResidece_SateChanged()
    End Sub
    Partial Private Sub OnResidenc_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnResidenc_TypeChanged()
    End Sub
    Partial Private Sub OnIsRefugeeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsRefugeeChanged()
    End Sub
    Partial Private Sub OnFamilyCard_NumChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyCard_NumChanged()
    End Sub
    Partial Private Sub OnFinncial_SateChanging(value As String)
    End Sub
    Partial Private Sub OnFinncial_SateChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnColor_MarkChanged()
    End Sub
    Partial Private Sub OnAddress_ID2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_ID2Changed()
    End Sub
    Partial Private Sub OnIsExcludedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsExcludedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
			Me._UnOrphans = New EntitySet(Of UnOrphan)(AddressOf Me.attach_UnOrphans, AddressOf Me.detach_UnOrphans)
			Me._Father = CType(Nothing, EntityRef(Of Father))
			Me._Mother = CType(Nothing, EntityRef(Of Mother))
			Me._Bail = CType(Nothing, EntityRef(Of Bail))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._User = CType(Nothing, EntityRef(Of User))
			Me._Address1 = CType(Nothing, EntityRef(Of Address))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mother_ID")>  _
		Public Property Mother_ID() As Integer
			Get
				Return Me._Mother_ID
			End Get
			Set
				If ((Me._Mother_ID = value)  _
							= false) Then
					If Me._Mother.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnMother_IDChanging(value)
					Me.SendPropertyChanging
					Me._Mother_ID = value
					Me.SendPropertyChanged("Mother_ID")
					Me.OnMother_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Father_Id", Storage:="_Father_ID")>  _
		Public Property Father_ID() As Integer
			Get
				Return Me._Father_ID
			End Get
			Set
				If ((Me._Father_ID = value)  _
							= false) Then
					Me.OnFather_IDChanging(value)
					Me.SendPropertyChanging
					Me._Father_ID = value
					Me.SendPropertyChanged("Father_ID")
					Me.OnFather_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IsBailed", Storage:="_IsBaild")>  _
		Public Property IsBaild() As Boolean
			Get
				Return Me._IsBaild
			End Get
			Set
				If ((Me._IsBaild = value)  _
							= false) Then
					Me.OnIsBaildChanging(value)
					Me.SendPropertyChanging
					Me._IsBaild = value
					Me.SendPropertyChanged("IsBaild")
					Me.OnIsBaildChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Bail_ID", Storage:="_Baild_ID")>  _
		Public Property Baild_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Baild_ID
			End Get
			Set
				If (Me._Baild_ID.Equals(value) = false) Then
					Me.OnBaild_IDChanging(value)
					Me.SendPropertyChanging
					Me._Baild_ID = value
					Me.SendPropertyChanged("Baild_ID")
					Me.OnBaild_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyCardPhoto", DbType:="varbinary(MAX)")>  _
		Public Property FamilyCardPhoto() As Byte()
			Get
				Return Me._FamilyCardPhoto
			End Get
			Set
				If (Object.Equals(Me._FamilyCardPhoto, value) = false) Then
					Me.OnFamilyCardPhotoChanging(value)
					Me.SendPropertyChanging
					Me._FamilyCardPhoto = value
					Me.SendPropertyChanged("FamilyCardPhoto")
					Me.OnFamilyCardPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyCardPhotoP2", DbType:="varbinary(MAX)")>  _
		Public Property FamilyCardPhotoP2() As Byte()
			Get
				Return Me._FamilyCardPhotoP2
			End Get
			Set
				If (Object.Equals(Me._FamilyCardPhotoP2, value) = false) Then
					Me.OnFamilyCardPhotoP2Changing(value)
					Me.SendPropertyChanging
					Me._FamilyCardPhotoP2 = value
					Me.SendPropertyChanged("FamilyCardPhotoP2")
					Me.OnFamilyCardPhotoP2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Redidence_State", Storage:="_Residece_Sate")>  _
		Public Property Residece_Sate() As String
			Get
				Return Me._Residece_Sate
			End Get
			Set
				If (String.Equals(Me._Residece_Sate, value) = false) Then
					Me.OnResidece_SateChanging(value)
					Me.SendPropertyChanging
					Me._Residece_Sate = value
					Me.SendPropertyChanged("Residece_Sate")
					Me.OnResidece_SateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Residence_Type", Storage:="_Residenc_Type")>  _
		Public Property Residenc_Type() As String
			Get
				Return Me._Residenc_Type
			End Get
			Set
				If (String.Equals(Me._Residenc_Type, value) = false) Then
					Me.OnResidenc_TypeChanging(value)
					Me.SendPropertyChanging
					Me._Residenc_Type = value
					Me.SendPropertyChanged("Residenc_Type")
					Me.OnResidenc_TypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRefugee")>  _
		Public Property IsRefugee() As Boolean
			Get
				Return Me._IsRefugee
			End Get
			Set
				If ((Me._IsRefugee = value)  _
							= false) Then
					Me.OnIsRefugeeChanging(value)
					Me.SendPropertyChanging
					Me._IsRefugee = value
					Me.SendPropertyChanged("IsRefugee")
					Me.OnIsRefugeeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyCard_Num")>  _
		Public Property FamilyCard_Num() As String
			Get
				Return Me._FamilyCard_Num
			End Get
			Set
				If (String.Equals(Me._FamilyCard_Num, value) = false) Then
					Me.OnFamilyCard_NumChanging(value)
					Me.SendPropertyChanging
					Me._FamilyCard_Num = value
					Me.SendPropertyChanged("FamilyCard_Num")
					Me.OnFamilyCard_NumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Finncial_State", Storage:="_Finncial_Sate")>  _
		Public Property Finncial_Sate() As String
			Get
				Return Me._Finncial_Sate
			End Get
			Set
				If (String.Equals(Me._Finncial_Sate, value) = false) Then
					Me.OnFinncial_SateChanging(value)
					Me.SendPropertyChanging
					Me._Finncial_Sate = value
					Me.SendPropertyChanged("Finncial_Sate")
					Me.OnFinncial_SateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID2")>  _
		Public Property Address_ID2() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID2
			End Get
			Set
				If (Me._Address_ID2.Equals(value) = false) Then
					If Me._Address1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_ID2Changing(value)
					Me.SendPropertyChanging
					Me._Address_ID2 = value
					Me.SendPropertyChanged("Address_ID2")
					Me.OnAddress_ID2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="isExcluded", Storage:="_IsExcluded")>  _
		Public Property IsExcluded() As Boolean
			Get
				Return Me._IsExcluded
			End Get
			Set
				If ((Me._IsExcluded = value)  _
							= false) Then
					Me.OnIsExcludedChanging(value)
					Me.SendPropertyChanging
					Me._IsExcluded = value
					Me.SendPropertyChanged("IsExcluded")
					Me.OnIsExcludedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Family_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_Bill", Storage:="_Bills", ThisKey:="ID", OtherKey:="Family_ID")>  _
		Public Property Bills() As EntitySet(Of Bill)
			Get
				Return Me._Bills
			End Get
			Set
				Me._Bills.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_UnOrphan", Storage:="_UnOrphans", ThisKey:="ID", OtherKey:="Family_ID")>  _
		Public Property UnOrphans() As EntitySet(Of UnOrphan)
			Get
				Return Me._UnOrphans
			End Get
			Set
				Me._UnOrphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Father_Family", Storage:="_Father", ThisKey:="Father_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Father() As Father
			Get
				Return Me._Father.Entity
			End Get
			Set
				Dim previousValue As Father = Me._Father.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Father.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Father.Entity = Nothing
						previousValue.Families.Remove(Me)
					End If
					Me._Father.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families.Add(Me)
						Me._Father_ID = value.ID
					Else
						Me._Father_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Father")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mother_Family", Storage:="_Mother", ThisKey:="Mother_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Mother() As Mother
			Get
				Return Me._Mother.Entity
			End Get
			Set
				Dim previousValue As Mother = Me._Mother.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Mother.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Mother.Entity = Nothing
						previousValue.Families.Remove(Me)
					End If
					Me._Mother.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families.Add(Me)
						Me._Mother_ID = value.ID
					Else
						Me._Mother_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Mother")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Family", Storage:="_Bail", ThisKey:="Baild_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Bail() As Bail
			Get
				Return Me._Bail.Entity
			End Get
			Set
				Dim previousValue As Bail = Me._Bail.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Bail.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Bail.Entity = Nothing
						previousValue.Families.Remove(Me)
					End If
					Me._Bail.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families.Add(Me)
						Me._Baild_ID = value.ID
					Else
						Me._Baild_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Bail")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Family", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Families.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Family", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Families.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Family1", Storage:="_Address1", ThisKey:="Address_ID2", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address1() As Address
			Get
				Return Me._Address1.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address1.Entity = Nothing
						previousValue.Families1.Remove(Me)
					End If
					Me._Address1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Families1.Add(Me)
						Me._Address_ID2 = value.ID
					Else
						Me._Address_ID2 = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address1")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Family = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Family = Nothing
		End Sub
		
		Private Sub attach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Family = Me
		End Sub
		
		Private Sub detach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Family = Nothing
		End Sub
		
		Private Sub attach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Family = Me
		End Sub
		
		Private Sub detach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Family = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Fathers")>  _
	Partial Public Class Father
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name_ID As Integer
		
		Private _Birthday As Date
		
		Private _Dieday As Date
		
		Private _Photo() As Byte
		
		Private _DeathCertificate_Photo() As Byte
		
		Private _Jop As String
		
		Private _Story As String
		
		Private _DeathResone As String
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Color_Mark As System.Nullable(Of Long)
		
		Private _IdentityCard_ID As ULong
		
		Private _Families As EntitySet(Of Family)
		
		Private _Name As EntityRef(Of Name)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnName_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnBirthdayChanging(value As Date)
    End Sub
    Partial Private Sub OnBirthdayChanged()
    End Sub
    Partial Private Sub OnDiedayChanging(value As Date)
    End Sub
    Partial Private Sub OnDiedayChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnDeathCertificate_PhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnDeathCertificate_PhotoChanged()
    End Sub
    Partial Private Sub OnJopChanging(value As String)
    End Sub
    Partial Private Sub OnJopChanged()
    End Sub
    Partial Private Sub OnStoryChanging(value As String)
    End Sub
    Partial Private Sub OnStoryChanged()
    End Sub
    Partial Private Sub OnDeathResoneChanging(value As String)
    End Sub
    Partial Private Sub OnDeathResoneChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnColor_MarkChanged()
    End Sub
    Partial Private Sub OnIdentityCard_IDChanging(value As ULong)
    End Sub
    Partial Private Sub OnIdentityCard_IDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Families = New EntitySet(Of Family)(AddressOf Me.attach_Families, AddressOf Me.detach_Families)
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name_ID")>  _
		Public Property Name_ID() As Integer
			Get
				Return Me._Name_ID
			End Get
			Set
				If ((Me._Name_ID = value)  _
							= false) Then
					If Me._Name.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthday")>  _
		Public Property Birthday() As Date
			Get
				Return Me._Birthday
			End Get
			Set
				If ((Me._Birthday = value)  _
							= false) Then
					Me.OnBirthdayChanging(value)
					Me.SendPropertyChanging
					Me._Birthday = value
					Me.SendPropertyChanged("Birthday")
					Me.OnBirthdayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dieday")>  _
		Public Property Dieday() As Date
			Get
				Return Me._Dieday
			End Get
			Set
				If ((Me._Dieday = value)  _
							= false) Then
					Me.OnDiedayChanging(value)
					Me.SendPropertyChanging
					Me._Dieday = value
					Me.SendPropertyChanged("Dieday")
					Me.OnDiedayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="varbinary(MAX)")>  _
		Public Property Photo() As Byte()
			Get
				Return Me._Photo
			End Get
			Set
				If (Object.Equals(Me._Photo, value) = false) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeathCertificate_Photo", DbType:="varbinary(MAX)")>  _
		Public Property DeathCertificate_Photo() As Byte()
			Get
				Return Me._DeathCertificate_Photo
			End Get
			Set
				If (Object.Equals(Me._DeathCertificate_Photo, value) = false) Then
					Me.OnDeathCertificate_PhotoChanging(value)
					Me.SendPropertyChanging
					Me._DeathCertificate_Photo = value
					Me.SendPropertyChanged("DeathCertificate_Photo")
					Me.OnDeathCertificate_PhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Jop")>  _
		Public Property Jop() As String
			Get
				Return Me._Jop
			End Get
			Set
				If (String.Equals(Me._Jop, value) = false) Then
					Me.OnJopChanging(value)
					Me.SendPropertyChanging
					Me._Jop = value
					Me.SendPropertyChanged("Jop")
					Me.OnJopChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Story")>  _
		Public Property Story() As String
			Get
				Return Me._Story
			End Get
			Set
				If (String.Equals(Me._Story, value) = false) Then
					Me.OnStoryChanging(value)
					Me.SendPropertyChanging
					Me._Story = value
					Me.SendPropertyChanged("Story")
					Me.OnStoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeathResone")>  _
		Public Property DeathResone() As String
			Get
				Return Me._DeathResone
			End Get
			Set
				If (String.Equals(Me._DeathResone, value) = false) Then
					Me.OnDeathResoneChanging(value)
					Me.SendPropertyChanging
					Me._DeathResone = value
					Me.SendPropertyChanged("DeathResone")
					Me.OnDeathResoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityCard_ID")>  _
		Public Property IdentityCard_ID() As ULong
			Get
				Return Me._IdentityCard_ID
			End Get
			Set
				If ((Me._IdentityCard_ID = value)  _
							= false) Then
					Me.OnIdentityCard_IDChanging(value)
					Me.SendPropertyChanging
					Me._IdentityCard_ID = value
					Me.SendPropertyChanged("IdentityCard_ID")
					Me.OnIdentityCard_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Father_Family", Storage:="_Families", ThisKey:="ID", OtherKey:="Father_ID")>  _
		Public Property Families() As EntitySet(Of Family)
			Get
				Return Me._Families
			End Get
			Set
				Me._Families.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Father", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.Fathers.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Fathers.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Father", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Fathers.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Fathers.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Father = Me
		End Sub
		
		Private Sub detach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Father = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Mothers")>  _
	Partial Public Class Mother
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name_ID As Integer
		
		Private _Birthday As Date
		
		Private _IsDead As Boolean
		
		Private _Dieday As System.Nullable(Of Date)
		
		Private _IdntityCard_ID As System.Nullable(Of ULong)
		
		Private _IdentityCard_Photo() As Byte
		
		Private _IdentityCard_Photo2() As Byte
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _IsMarried As Boolean
		
		Private _Husband_NameID As String
		
		Private _IsOwnOrphans As Boolean
		
		Private _Jop As String
		
		Private _Salary As System.Nullable(Of Decimal)
		
		Private _Note As String
		
		Private _Story As String
		
		Private _User_Id As Integer
		
		Private _RegDate As Date
		
		Private _Color_Mark As System.Nullable(Of Long)
		
		Private _Families As EntitySet(Of Family)
		
		Private _Name As EntityRef(Of Name)
		
		Private _Address As EntityRef(Of Address)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnName_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnBirthdayChanging(value As Date)
    End Sub
    Partial Private Sub OnBirthdayChanged()
    End Sub
    Partial Private Sub OnIsDeadChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeadChanged()
    End Sub
    Partial Private Sub OnDiedayChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDiedayChanged()
    End Sub
    Partial Private Sub OnIdntityCard_IDChanging(value As System.Nullable(Of ULong))
    End Sub
    Partial Private Sub OnIdntityCard_IDChanged()
    End Sub
    Partial Private Sub OnIdentityCard_PhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnIdentityCard_PhotoChanged()
    End Sub
    Partial Private Sub OnIdentityCard_Photo2Changing(value As Byte())
    End Sub
    Partial Private Sub OnIdentityCard_Photo2Changed()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnIsMarriedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMarriedChanged()
    End Sub
    Partial Private Sub OnHusband_NameChanging(value As String)
    End Sub
    Partial Private Sub OnHusband_NameChanged()
    End Sub
    Partial Private Sub OnIsOwnOrphansChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsOwnOrphansChanged()
    End Sub
    Partial Private Sub OnJopChanging(value As String)
    End Sub
    Partial Private Sub OnJopChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnStoryChanging(value As String)
    End Sub
    Partial Private Sub OnStoryChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnColor_MarkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Families = New EntitySet(Of Family)(AddressOf Me.attach_Families, AddressOf Me.detach_Families)
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Name_Id", Storage:="_Name_ID")>  _
		Public Property Name_ID() As Integer
			Get
				Return Me._Name_ID
			End Get
			Set
				If ((Me._Name_ID = value)  _
							= false) Then
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthday")>  _
		Public Property Birthday() As Date
			Get
				Return Me._Birthday
			End Get
			Set
				If ((Me._Birthday = value)  _
							= false) Then
					Me.OnBirthdayChanging(value)
					Me.SendPropertyChanging
					Me._Birthday = value
					Me.SendPropertyChanged("Birthday")
					Me.OnBirthdayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDead")>  _
		Public Property IsDead() As Boolean
			Get
				Return Me._IsDead
			End Get
			Set
				If ((Me._IsDead = value)  _
							= false) Then
					Me.OnIsDeadChanging(value)
					Me.SendPropertyChanging
					Me._IsDead = value
					Me.SendPropertyChanged("IsDead")
					Me.OnIsDeadChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dieday")>  _
		Public Property Dieday() As System.Nullable(Of Date)
			Get
				Return Me._Dieday
			End Get
			Set
				If (Me._Dieday.Equals(value) = false) Then
					Me.OnDiedayChanging(value)
					Me.SendPropertyChanging
					Me._Dieday = value
					Me.SendPropertyChanged("Dieday")
					Me.OnDiedayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IdentityCard_ID", Storage:="_IdntityCard_ID")>  _
		Public Property IdntityCard_ID() As System.Nullable(Of ULong)
			Get
				Return Me._IdntityCard_ID
			End Get
			Set
				If (Me._IdntityCard_ID.Equals(value) = false) Then
					Me.OnIdntityCard_IDChanging(value)
					Me.SendPropertyChanging
					Me._IdntityCard_ID = value
					Me.SendPropertyChanged("IdntityCard_ID")
					Me.OnIdntityCard_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityCard_Photo", DbType:="varbinary(MAX)")>  _
		Public Property IdentityCard_Photo() As Byte()
			Get
				Return Me._IdentityCard_Photo
			End Get
			Set
				If (Object.Equals(Me._IdentityCard_Photo, value) = false) Then
					Me.OnIdentityCard_PhotoChanging(value)
					Me.SendPropertyChanging
					Me._IdentityCard_Photo = value
					Me.SendPropertyChanged("IdentityCard_Photo")
					Me.OnIdentityCard_PhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityCard_Photo2", DbType:="varbinary(MAX)")>  _
		Public Property IdentityCard_Photo2() As Byte()
			Get
				Return Me._IdentityCard_Photo2
			End Get
			Set
				If (Object.Equals(Me._IdentityCard_Photo2, value) = false) Then
					Me.OnIdentityCard_Photo2Changing(value)
					Me.SendPropertyChanging
					Me._IdentityCard_Photo2 = value
					Me.SendPropertyChanged("IdentityCard_Photo2")
					Me.OnIdentityCard_Photo2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMarried")>  _
		Public Property IsMarried() As Boolean
			Get
				Return Me._IsMarried
			End Get
			Set
				If ((Me._IsMarried = value)  _
							= false) Then
					Me.OnIsMarriedChanging(value)
					Me.SendPropertyChanging
					Me._IsMarried = value
					Me.SendPropertyChanged("IsMarried")
					Me.OnIsMarriedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="HusbandName", Storage:="_Husband_NameID")>  _
		Public Property Husband_Name() As String
			Get
				Return Me._Husband_NameID
			End Get
			Set
				If (String.Equals(Me._Husband_NameID, value) = false) Then
					Me.OnHusband_NameChanging(value)
					Me.SendPropertyChanging
					Me._Husband_NameID = value
					Me.SendPropertyChanged("Husband_Name")
					Me.OnHusband_NameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOwnOrphans")>  _
		Public Property IsOwnOrphans() As Boolean
			Get
				Return Me._IsOwnOrphans
			End Get
			Set
				If ((Me._IsOwnOrphans = value)  _
							= false) Then
					Me.OnIsOwnOrphansChanging(value)
					Me.SendPropertyChanging
					Me._IsOwnOrphans = value
					Me.SendPropertyChanged("IsOwnOrphans")
					Me.OnIsOwnOrphansChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Jop")>  _
		Public Property Jop() As String
			Get
				Return Me._Jop
			End Get
			Set
				If (String.Equals(Me._Jop, value) = false) Then
					Me.OnJopChanging(value)
					Me.SendPropertyChanging
					Me._Jop = value
					Me.SendPropertyChanged("Jop")
					Me.OnJopChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary")>  _
		Public Property Salary() As System.Nullable(Of Decimal)
			Get
				Return Me._Salary
			End Get
			Set
				If (Me._Salary.Equals(value) = false) Then
					Me.OnSalaryChanging(value)
					Me.SendPropertyChanging
					Me._Salary = value
					Me.SendPropertyChanged("Salary")
					Me.OnSalaryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Story")>  _
		Public Property Story() As String
			Get
				Return Me._Story
			End Get
			Set
				If (String.Equals(Me._Story, value) = false) Then
					Me.OnStoryChanging(value)
					Me.SendPropertyChanging
					Me._Story = value
					Me.SendPropertyChanged("Story")
					Me.OnStoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="User_ID", Storage:="_User_Id")>  _
		Public Property User_Id() As Integer
			Get
				Return Me._User_Id
			End Get
			Set
				If ((Me._User_Id = value)  _
							= false) Then
					Me.OnUser_IdChanging(value)
					Me.SendPropertyChanging
					Me._User_Id = value
					Me.SendPropertyChanged("User_Id")
					Me.OnUser_IdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mother_Family", Storage:="_Families", ThisKey:="ID", OtherKey:="Mother_ID")>  _
		Public Property Families() As EntitySet(Of Family)
			Get
				Return Me._Families
			End Get
			Set
				Me._Families.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Mother", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.Mothers.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Mothers.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Mother", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Mothers.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Mothers.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Mother", Storage:="_User", ThisKey:="User_Id", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Mothers.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Mothers.Add(Me)
						Me._User_Id = value.ID
					Else
						Me._User_Id = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Mother = Me
		End Sub
		
		Private Sub detach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Mother = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="BondsMen")>  _
	Partial Public Class BondsMan
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name_ID As Integer
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _IdentityCard_ID As System.Nullable(Of ULong)
		
		Private _IdentityCard_Photo() As Byte
		
		Private _IdentityCard_Photo2() As Byte
		
		Private _Jop As String
		
		Private _Income As System.Nullable(Of Decimal)
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Color_Mark As System.Nullable(Of Long)
		
		Private _FingerPrint() As Byte
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Name As EntityRef(Of Name)
		
		Private _Address As EntityRef(Of Address)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnName_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnIdentityCard_IDChanging(value As System.Nullable(Of ULong))
    End Sub
    Partial Private Sub OnIdentityCard_IDChanged()
    End Sub
    Partial Private Sub OnIdentityCard_PhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnIdentityCard_PhotoChanged()
    End Sub
    Partial Private Sub OnIdentityCard_Photo2Changing(value As Byte())
    End Sub
    Partial Private Sub OnIdentityCard_Photo2Changed()
    End Sub
    Partial Private Sub OnJopChanging(value As String)
    End Sub
    Partial Private Sub OnJopChanged()
    End Sub
    Partial Private Sub OnIncomeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIncomeChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnColor_MarkChanged()
    End Sub
    Partial Private Sub OnFingerPrintChanging(value As Byte())
    End Sub
    Partial Private Sub OnFingerPrintChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Name_Id", Storage:="_Name_ID")>  _
		Public Property Name_ID() As Integer
			Get
				Return Me._Name_ID
			End Get
			Set
				If ((Me._Name_ID = value)  _
							= false) Then
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityCard_ID")>  _
		Public Property IdentityCard_ID() As System.Nullable(Of ULong)
			Get
				Return Me._IdentityCard_ID
			End Get
			Set
				If (Me._IdentityCard_ID.Equals(value) = false) Then
					Me.OnIdentityCard_IDChanging(value)
					Me.SendPropertyChanging
					Me._IdentityCard_ID = value
					Me.SendPropertyChanged("IdentityCard_ID")
					Me.OnIdentityCard_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentityCard_Photo", DbType:="varbinary(MAX)")>  _
		Public Property IdentityCard_Photo() As Byte()
			Get
				Return Me._IdentityCard_Photo
			End Get
			Set
				If (Object.Equals(Me._IdentityCard_Photo, value) = false) Then
					Me.OnIdentityCard_PhotoChanging(value)
					Me.SendPropertyChanging
					Me._IdentityCard_Photo = value
					Me.SendPropertyChanged("IdentityCard_Photo")
					Me.OnIdentityCard_PhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IdentityCard_photo2", Storage:="_IdentityCard_Photo2", DbType:="varbinary(MAX)")>  _
		Public Property IdentityCard_Photo2() As Byte()
			Get
				Return Me._IdentityCard_Photo2
			End Get
			Set
				If (Object.Equals(Me._IdentityCard_Photo2, value) = false) Then
					Me.OnIdentityCard_Photo2Changing(value)
					Me.SendPropertyChanging
					Me._IdentityCard_Photo2 = value
					Me.SendPropertyChanged("IdentityCard_Photo2")
					Me.OnIdentityCard_Photo2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Jop")>  _
		Public Property Jop() As String
			Get
				Return Me._Jop
			End Get
			Set
				If (String.Equals(Me._Jop, value) = false) Then
					Me.OnJopChanging(value)
					Me.SendPropertyChanging
					Me._Jop = value
					Me.SendPropertyChanged("Jop")
					Me.OnJopChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Income")>  _
		Public Property Income() As System.Nullable(Of Decimal)
			Get
				Return Me._Income
			End Get
			Set
				If (Me._Income.Equals(value) = false) Then
					Me.OnIncomeChanging(value)
					Me.SendPropertyChanging
					Me._Income = value
					Me.SendPropertyChanged("Income")
					Me.OnIncomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FingerPrint", DbType:="varbinary(MAX)")>  _
		Public Property FingerPrint() As Byte()
			Get
				Return Me._FingerPrint
			End Get
			Set
				If (Object.Equals(Me._FingerPrint, value) = false) Then
					Me.OnFingerPrintChanging(value)
					Me.SendPropertyChanging
					Me._FingerPrint = value
					Me.SendPropertyChanged("FingerPrint")
					Me.OnFingerPrintChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BondsMan_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="BondsMan_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_BondsMan", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.BondsMans.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BondsMans.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_BondsMan", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.BondsMans.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BondsMans.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_BondsMan", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.BondsMans.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BondsMans.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.BondsMan = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.BondsMan = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Supporters")>  _
	Partial Public Class Supporter
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name_ID As Integer
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _Box_ID As Integer
		
		Private _Color_Mark As System.Nullable(Of Long)
		
		Private _Is_Still_Support As Boolean
		
		Private _Is_Monthly_Support As Boolean
		
		Private _Is_Family_Support As Boolean
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Bails As EntitySet(Of Bail)
		
		Private _Name As EntityRef(Of Name)
		
		Private _Address As EntityRef(Of Address)
		
		Private _Box As EntityRef(Of Box)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnName_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnBox_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBox_IDChanged()
    End Sub
    Partial Private Sub OnColor_MarkChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnColor_MarkChanged()
    End Sub
    Partial Private Sub OnIs_Still_SupportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_Still_SupportChanged()
    End Sub
    Partial Private Sub OnIs_Monthly_SupportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_Monthly_SupportChanged()
    End Sub
    Partial Private Sub OnIs_Family_SupportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_Family_SupportChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Bails = New EntitySet(Of Bail)(AddressOf Me.attach_Bails, AddressOf Me.detach_Bails)
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._Box = CType(Nothing, EntityRef(Of Box))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name_ID")>  _
		Public Property Name_ID() As Integer
			Get
				Return Me._Name_ID
			End Get
			Set
				If ((Me._Name_ID = value)  _
							= false) Then
					If Me._Name.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Box_ID")>  _
		Public Property Box_ID() As Integer
			Get
				Return Me._Box_ID
			End Get
			Set
				If ((Me._Box_ID = value)  _
							= false) Then
					If Me._Box.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBox_IDChanging(value)
					Me.SendPropertyChanging
					Me._Box_ID = value
					Me.SendPropertyChanged("Box_ID")
					Me.OnBox_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color_Mark")>  _
		Public Property Color_Mark() As System.Nullable(Of Long)
			Get
				Return Me._Color_Mark
			End Get
			Set
				If (Me._Color_Mark.Equals(value) = false) Then
					Me.OnColor_MarkChanging(value)
					Me.SendPropertyChanging
					Me._Color_Mark = value
					Me.SendPropertyChanged("Color_Mark")
					Me.OnColor_MarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Is_Still_Suppo", Storage:="_Is_Still_Support")>  _
		Public Property Is_Still_Support() As Boolean
			Get
				Return Me._Is_Still_Support
			End Get
			Set
				If ((Me._Is_Still_Support = value)  _
							= false) Then
					Me.OnIs_Still_SupportChanging(value)
					Me.SendPropertyChanging
					Me._Is_Still_Support = value
					Me.SendPropertyChanged("Is_Still_Support")
					Me.OnIs_Still_SupportChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Is_Monthly_sup", Storage:="_Is_Monthly_Support")>  _
		Public Property Is_Monthly_Support() As Boolean
			Get
				Return Me._Is_Monthly_Support
			End Get
			Set
				If ((Me._Is_Monthly_Support = value)  _
							= false) Then
					Me.OnIs_Monthly_SupportChanging(value)
					Me.SendPropertyChanging
					Me._Is_Monthly_Support = value
					Me.SendPropertyChanged("Is_Monthly_Support")
					Me.OnIs_Monthly_SupportChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Is_Family_sup", Storage:="_Is_Family_Support")>  _
		Public Property Is_Family_Support() As Boolean
			Get
				Return Me._Is_Family_Support
			End Get
			Set
				If ((Me._Is_Family_Support = value)  _
							= false) Then
					Me.OnIs_Family_SupportChanging(value)
					Me.SendPropertyChanging
					Me._Is_Family_Support = value
					Me.SendPropertyChanged("Is_Family_Support")
					Me.OnIs_Family_SupportChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supporter_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Suppoter_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supporter_Bail", Storage:="_Bails", ThisKey:="ID", OtherKey:="Supporter_ID")>  _
		Public Property Bails() As EntitySet(Of Bail)
			Get
				Return Me._Bails
			End Get
			Set
				Me._Bails.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Supporter", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.Supporters.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Supporters.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Supporter", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Supporters.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Supporters.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Supporter", Storage:="_Box", ThisKey:="Box_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Box() As Box
			Get
				Return Me._Box.Entity
			End Get
			Set
				Dim previousValue As Box = Me._Box.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Box.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Box.Entity = Nothing
						previousValue.Supporters.Remove(Me)
					End If
					Me._Box.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Supporters.Add(Me)
						Me._Box_ID = value.ID
					Else
						Me._Box_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Box")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Supporter", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Supporters.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Supporters.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Supporter = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Supporter = Nothing
		End Sub
		
		Private Sub attach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.Supporter = Me
		End Sub
		
		Private Sub detach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.Supporter = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Names")>  _
	Partial Public Class Name
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _First As String
		
		Private _Father As String
		
		Private _Last As String
		
		Private _EName As String
		
		Private _EFather As String
		
		Private _ELast As String
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Fathers As EntitySet(Of Father)
		
		Private _Mothers As EntitySet(Of Mother)
		
		Private _BondsMans As EntitySet(Of BondsMan)
		
		Private _Supporters As EntitySet(Of Supporter)
		
		Private _Users As EntitySet(Of User)
		
		Private _UnOrphans As EntitySet(Of UnOrphan)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFirstChanging(value As String)
    End Sub
    Partial Private Sub OnFirstChanged()
    End Sub
    Partial Private Sub OnFatherChanging(value As String)
    End Sub
    Partial Private Sub OnFatherChanged()
    End Sub
    Partial Private Sub OnLastChanging(value As String)
    End Sub
    Partial Private Sub OnLastChanged()
    End Sub
    Partial Private Sub OnENameChanging(value As String)
    End Sub
    Partial Private Sub OnENameChanged()
    End Sub
    Partial Private Sub OnEFatherChanging(value As String)
    End Sub
    Partial Private Sub OnEFatherChanged()
    End Sub
    Partial Private Sub OnELastChanging(value As String)
    End Sub
    Partial Private Sub OnELastChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Fathers = New EntitySet(Of Father)(AddressOf Me.attach_Fathers, AddressOf Me.detach_Fathers)
			Me._Mothers = New EntitySet(Of Mother)(AddressOf Me.attach_Mothers, AddressOf Me.detach_Mothers)
			Me._BondsMans = New EntitySet(Of BondsMan)(AddressOf Me.attach_BondsMans, AddressOf Me.detach_BondsMans)
			Me._Supporters = New EntitySet(Of Supporter)(AddressOf Me.attach_Supporters, AddressOf Me.detach_Supporters)
			Me._Users = New EntitySet(Of User)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
			Me._UnOrphans = New EntitySet(Of UnOrphan)(AddressOf Me.attach_UnOrphans, AddressOf Me.detach_UnOrphans)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_First", CanBeNull:=false)>  _
		Public Property First() As String
			Get
				Return Me._First
			End Get
			Set
				If (String.Equals(Me._First, value) = false) Then
					Me.OnFirstChanging(value)
					Me.SendPropertyChanging
					Me._First = value
					Me.SendPropertyChanged("First")
					Me.OnFirstChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Father")>  _
		Public Property Father() As String
			Get
				Return Me._Father
			End Get
			Set
				If (String.Equals(Me._Father, value) = false) Then
					Me.OnFatherChanging(value)
					Me.SendPropertyChanging
					Me._Father = value
					Me.SendPropertyChanged("Father")
					Me.OnFatherChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Last")>  _
		Public Property Last() As String
			Get
				Return Me._Last
			End Get
			Set
				If (String.Equals(Me._Last, value) = false) Then
					Me.OnLastChanging(value)
					Me.SendPropertyChanging
					Me._Last = value
					Me.SendPropertyChanged("Last")
					Me.OnLastChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EName")>  _
		Public Property EName() As String
			Get
				Return Me._EName
			End Get
			Set
				If (String.Equals(Me._EName, value) = false) Then
					Me.OnENameChanging(value)
					Me.SendPropertyChanging
					Me._EName = value
					Me.SendPropertyChanged("EName")
					Me.OnENameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFather")>  _
		Public Property EFather() As String
			Get
				Return Me._EFather
			End Get
			Set
				If (String.Equals(Me._EFather, value) = false) Then
					Me.OnEFatherChanging(value)
					Me.SendPropertyChanging
					Me._EFather = value
					Me.SendPropertyChanged("EFather")
					Me.OnEFatherChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ELast")>  _
		Public Property ELast() As String
			Get
				Return Me._ELast
			End Get
			Set
				If (String.Equals(Me._ELast, value) = false) Then
					Me.OnELastChanging(value)
					Me.SendPropertyChanging
					Me._ELast = value
					Me.SendPropertyChanged("ELast")
					Me.OnELastChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Father", Storage:="_Fathers", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property Fathers() As EntitySet(Of Father)
			Get
				Return Me._Fathers
			End Get
			Set
				Me._Fathers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Mother", Storage:="_Mothers", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property Mothers() As EntitySet(Of Mother)
			Get
				Return Me._Mothers
			End Get
			Set
				Me._Mothers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_BondsMan", Storage:="_BondsMans", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property BondsMans() As EntitySet(Of BondsMan)
			Get
				Return Me._BondsMans
			End Get
			Set
				Me._BondsMans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_Supporter", Storage:="_Supporters", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property Supporters() As EntitySet(Of Supporter)
			Get
				Return Me._Supporters
			End Get
			Set
				Me._Supporters.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_User", Storage:="_Users", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property Users() As EntitySet(Of User)
			Get
				Return Me._Users
			End Get
			Set
				Me._Users.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_UnOrphan", Storage:="_UnOrphans", ThisKey:="ID", OtherKey:="Name_ID")>  _
		Public Property UnOrphans() As EntitySet(Of UnOrphan)
			Get
				Return Me._UnOrphans
			End Get
			Set
				Me._UnOrphans.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_Fathers(ByVal entity As Father)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_Fathers(ByVal entity As Father)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_Users(ByVal entity As User)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_Users(ByVal entity As User)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
		
		Private Sub attach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Name = Me
		End Sub
		
		Private Sub detach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Name = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Addresses")>  _
	Partial Public Class Address
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Country As String
		
		Private _City As String
		
		Private _Town As String
		
		Private _Street As String
		
		Private _Home_Phone As String
		
		Private _Cell_Phone As String
		
		Private _Work_Phone As String
		
		Private _Fax As String
		
		Private _Email As String
		
		Private _Facebook As String
		
		Private _Twitter As String
		
		Private _Note As String
		
		Private _Families As EntitySet(Of Family)
		
		Private _Families1 As EntitySet(Of Family)
		
		Private _Mothers As EntitySet(Of Mother)
		
		Private _BondsMans As EntitySet(Of BondsMan)
		
		Private _Supporters As EntitySet(Of Supporter)
		
		Private _Users As EntitySet(Of User)
		
		Private _UnOrphans As EntitySet(Of UnOrphan)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnTownChanging(value As String)
    End Sub
    Partial Private Sub OnTownChanged()
    End Sub
    Partial Private Sub OnStreetChanging(value As String)
    End Sub
    Partial Private Sub OnStreetChanged()
    End Sub
    Partial Private Sub OnHome_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnHome_PhoneChanged()
    End Sub
    Partial Private Sub OnCell_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCell_PhoneChanged()
    End Sub
    Partial Private Sub OnWork_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnWork_PhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnFacebookChanging(value As String)
    End Sub
    Partial Private Sub OnFacebookChanged()
    End Sub
    Partial Private Sub OnTwitterChanging(value As String)
    End Sub
    Partial Private Sub OnTwitterChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Families = New EntitySet(Of Family)(AddressOf Me.attach_Families, AddressOf Me.detach_Families)
			Me._Families1 = New EntitySet(Of Family)(AddressOf Me.attach_Families1, AddressOf Me.detach_Families1)
			Me._Mothers = New EntitySet(Of Mother)(AddressOf Me.attach_Mothers, AddressOf Me.detach_Mothers)
			Me._BondsMans = New EntitySet(Of BondsMan)(AddressOf Me.attach_BondsMans, AddressOf Me.detach_BondsMans)
			Me._Supporters = New EntitySet(Of Supporter)(AddressOf Me.attach_Supporters, AddressOf Me.detach_Supporters)
			Me._Users = New EntitySet(Of User)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
			Me._UnOrphans = New EntitySet(Of UnOrphan)(AddressOf Me.attach_UnOrphans, AddressOf Me.detach_UnOrphans)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country")>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City")>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Town")>  _
		Public Property Town() As String
			Get
				Return Me._Town
			End Get
			Set
				If (String.Equals(Me._Town, value) = false) Then
					Me.OnTownChanging(value)
					Me.SendPropertyChanging
					Me._Town = value
					Me.SendPropertyChanged("Town")
					Me.OnTownChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Street")>  _
		Public Property Street() As String
			Get
				Return Me._Street
			End Get
			Set
				If (String.Equals(Me._Street, value) = false) Then
					Me.OnStreetChanging(value)
					Me.SendPropertyChanging
					Me._Street = value
					Me.SendPropertyChanged("Street")
					Me.OnStreetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Home_Phone")>  _
		Public Property Home_Phone() As String
			Get
				Return Me._Home_Phone
			End Get
			Set
				If (String.Equals(Me._Home_Phone, value) = false) Then
					Me.OnHome_PhoneChanging(value)
					Me.SendPropertyChanging
					Me._Home_Phone = value
					Me.SendPropertyChanged("Home_Phone")
					Me.OnHome_PhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cell_Phone")>  _
		Public Property Cell_Phone() As String
			Get
				Return Me._Cell_Phone
			End Get
			Set
				If (String.Equals(Me._Cell_Phone, value) = false) Then
					Me.OnCell_PhoneChanging(value)
					Me.SendPropertyChanging
					Me._Cell_Phone = value
					Me.SendPropertyChanged("Cell_Phone")
					Me.OnCell_PhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Work_phone", Storage:="_Work_Phone")>  _
		Public Property Work_Phone() As String
			Get
				Return Me._Work_Phone
			End Get
			Set
				If (String.Equals(Me._Work_Phone, value) = false) Then
					Me.OnWork_PhoneChanging(value)
					Me.SendPropertyChanging
					Me._Work_Phone = value
					Me.SendPropertyChanged("Work_Phone")
					Me.OnWork_PhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax")>  _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set
				If (String.Equals(Me._Fax, value) = false) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Facebook")>  _
		Public Property Facebook() As String
			Get
				Return Me._Facebook
			End Get
			Set
				If (String.Equals(Me._Facebook, value) = false) Then
					Me.OnFacebookChanging(value)
					Me.SendPropertyChanging
					Me._Facebook = value
					Me.SendPropertyChanged("Facebook")
					Me.OnFacebookChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Twitter")>  _
		Public Property Twitter() As String
			Get
				Return Me._Twitter
			End Get
			Set
				If (String.Equals(Me._Twitter, value) = false) Then
					Me.OnTwitterChanging(value)
					Me.SendPropertyChanging
					Me._Twitter = value
					Me.SendPropertyChanged("Twitter")
					Me.OnTwitterChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Family", Storage:="_Families", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property Families() As EntitySet(Of Family)
			Get
				Return Me._Families
			End Get
			Set
				Me._Families.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Family1", Storage:="_Families1", ThisKey:="ID", OtherKey:="Address_ID2")>  _
		Public Property Families1() As EntitySet(Of Family)
			Get
				Return Me._Families1
			End Get
			Set
				Me._Families1.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Mother", Storage:="_Mothers", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property Mothers() As EntitySet(Of Mother)
			Get
				Return Me._Mothers
			End Get
			Set
				Me._Mothers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_BondsMan", Storage:="_BondsMans", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property BondsMans() As EntitySet(Of BondsMan)
			Get
				Return Me._BondsMans
			End Get
			Set
				Me._BondsMans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Supporter", Storage:="_Supporters", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property Supporters() As EntitySet(Of Supporter)
			Get
				Return Me._Supporters
			End Get
			Set
				Me._Supporters.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_User", Storage:="_Users", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property Users() As EntitySet(Of User)
			Get
				Return Me._Users
			End Get
			Set
				Me._Users.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_UnOrphan", Storage:="_UnOrphans", ThisKey:="ID", OtherKey:="Address_ID")>  _
		Public Property UnOrphans() As EntitySet(Of UnOrphan)
			Get
				Return Me._UnOrphans
			End Get
			Set
				Me._UnOrphans.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_Families1(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Address1 = Me
		End Sub
		
		Private Sub detach_Families1(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Address1 = Nothing
		End Sub
		
		Private Sub attach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_Users(ByVal entity As User)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Users(ByVal entity As User)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Healthies")>  _
	Partial Public Class Healthy
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Medicen As String
		
		Private _Cost As System.Nullable(Of Decimal)
		
		Private _SupervisorDoctor As String
		
		Private _Note As String
		
		Private _ReporteFile() As Byte
		
		Private _Orphans As EntitySet(Of Orphan)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMedicenChanging(value As String)
    End Sub
    Partial Private Sub OnMedicenChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnSupervisorDoctorChanging(value As String)
    End Sub
    Partial Private Sub OnSupervisorDoctorChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnReporteFileChanging(value As Byte())
    End Sub
    Partial Private Sub OnReporteFileChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Medicen")>  _
		Public Property Medicen() As String
			Get
				Return Me._Medicen
			End Get
			Set
				If (String.Equals(Me._Medicen, value) = false) Then
					Me.OnMedicenChanging(value)
					Me.SendPropertyChanging
					Me._Medicen = value
					Me.SendPropertyChanged("Medicen")
					Me.OnMedicenChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost")>  _
		Public Property Cost() As System.Nullable(Of Decimal)
			Get
				Return Me._Cost
			End Get
			Set
				If (Me._Cost.Equals(value) = false) Then
					Me.OnCostChanging(value)
					Me.SendPropertyChanging
					Me._Cost = value
					Me.SendPropertyChanged("Cost")
					Me.OnCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupervisorDoctor")>  _
		Public Property SupervisorDoctor() As String
			Get
				Return Me._SupervisorDoctor
			End Get
			Set
				If (String.Equals(Me._SupervisorDoctor, value) = false) Then
					Me.OnSupervisorDoctorChanging(value)
					Me.SendPropertyChanging
					Me._SupervisorDoctor = value
					Me.SendPropertyChanged("SupervisorDoctor")
					Me.OnSupervisorDoctorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReporteFile", DbType:="varbinary(MAX)")>  _
		Public Property ReporteFile() As Byte()
			Get
				Return Me._ReporteFile
			End Get
			Set
				If (Object.Equals(Me._ReporteFile, value) = false) Then
					Me.OnReporteFileChanging(value)
					Me.SendPropertyChanging
					Me._ReporteFile = value
					Me.SendPropertyChanged("ReporteFile")
					Me.OnReporteFileChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Healthy_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Health_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Healthy = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Healthy = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Studies")>  _
	Partial Public Class Study
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Stage As String
		
		Private _School As String
		
		Private _Univercity As String
		
		Private _Collage As String
		
		Private _MonthlyCost As System.Nullable(Of Decimal)
		
		Private _DegreesRate As System.Nullable(Of Decimal)
		
		Private _Resons As String
		
		Private _Certificate_Photo1() As Byte
		
		Private _Certificate_Photo2() As Byte
		
		Private _Note As String
		
		Private _Orphans As EntitySet(Of Orphan)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStageChanging(value As String)
    End Sub
    Partial Private Sub OnStageChanged()
    End Sub
    Partial Private Sub OnSchoolChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolChanged()
    End Sub
    Partial Private Sub OnUnivercityChanging(value As String)
    End Sub
    Partial Private Sub OnUnivercityChanged()
    End Sub
    Partial Private Sub OnCollageChanging(value As String)
    End Sub
    Partial Private Sub OnCollageChanged()
    End Sub
    Partial Private Sub OnMonthlyCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMonthlyCostChanged()
    End Sub
    Partial Private Sub OnDegreesRateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDegreesRateChanged()
    End Sub
    Partial Private Sub OnResonsChanging(value As String)
    End Sub
    Partial Private Sub OnResonsChanged()
    End Sub
    Partial Private Sub OnCertificate_Photo1Changing(value As Byte())
    End Sub
    Partial Private Sub OnCertificate_Photo1Changed()
    End Sub
    Partial Private Sub OnCertificate_Photo2Changing(value As Byte())
    End Sub
    Partial Private Sub OnCertificate_Photo2Changed()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stage", CanBeNull:=false)>  _
		Public Property Stage() As String
			Get
				Return Me._Stage
			End Get
			Set
				If (String.Equals(Me._Stage, value) = false) Then
					Me.OnStageChanging(value)
					Me.SendPropertyChanging
					Me._Stage = value
					Me.SendPropertyChanged("Stage")
					Me.OnStageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School")>  _
		Public Property School() As String
			Get
				Return Me._School
			End Get
			Set
				If (String.Equals(Me._School, value) = false) Then
					Me.OnSchoolChanging(value)
					Me.SendPropertyChanging
					Me._School = value
					Me.SendPropertyChanged("School")
					Me.OnSchoolChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Univercity")>  _
		Public Property Univercity() As String
			Get
				Return Me._Univercity
			End Get
			Set
				If (String.Equals(Me._Univercity, value) = false) Then
					Me.OnUnivercityChanging(value)
					Me.SendPropertyChanging
					Me._Univercity = value
					Me.SendPropertyChanged("Univercity")
					Me.OnUnivercityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Collage")>  _
		Public Property Collage() As String
			Get
				Return Me._Collage
			End Get
			Set
				If (String.Equals(Me._Collage, value) = false) Then
					Me.OnCollageChanging(value)
					Me.SendPropertyChanging
					Me._Collage = value
					Me.SendPropertyChanged("Collage")
					Me.OnCollageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthlyCost")>  _
		Public Property MonthlyCost() As System.Nullable(Of Decimal)
			Get
				Return Me._MonthlyCost
			End Get
			Set
				If (Me._MonthlyCost.Equals(value) = false) Then
					Me.OnMonthlyCostChanging(value)
					Me.SendPropertyChanging
					Me._MonthlyCost = value
					Me.SendPropertyChanged("MonthlyCost")
					Me.OnMonthlyCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DegreesRate")>  _
		Public Property DegreesRate() As System.Nullable(Of Decimal)
			Get
				Return Me._DegreesRate
			End Get
			Set
				If (Me._DegreesRate.Equals(value) = false) Then
					Me.OnDegreesRateChanging(value)
					Me.SendPropertyChanging
					Me._DegreesRate = value
					Me.SendPropertyChanged("DegreesRate")
					Me.OnDegreesRateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Reasons", Storage:="_Resons")>  _
		Public Property Resons() As String
			Get
				Return Me._Resons
			End Get
			Set
				If (String.Equals(Me._Resons, value) = false) Then
					Me.OnResonsChanging(value)
					Me.SendPropertyChanging
					Me._Resons = value
					Me.SendPropertyChanged("Resons")
					Me.OnResonsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Certificate_Photo1", DbType:="varbinary(MAX)")>  _
		Public Property Certificate_Photo1() As Byte()
			Get
				Return Me._Certificate_Photo1
			End Get
			Set
				If (Object.Equals(Me._Certificate_Photo1, value) = false) Then
					Me.OnCertificate_Photo1Changing(value)
					Me.SendPropertyChanging
					Me._Certificate_Photo1 = value
					Me.SendPropertyChanged("Certificate_Photo1")
					Me.OnCertificate_Photo1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Certificate_Photo2", DbType:="varbinary(MAX)")>  _
		Public Property Certificate_Photo2() As Byte()
			Get
				Return Me._Certificate_Photo2
			End Get
			Set
				If (Object.Equals(Me._Certificate_Photo2, value) = false) Then
					Me.OnCertificate_Photo2Changing(value)
					Me.SendPropertyChanging
					Me._Certificate_Photo2 = value
					Me.SendPropertyChanged("Certificate_Photo2")
					Me.OnCertificate_Photo2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Study_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Education_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Study = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Study = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Users")>  _
	Partial Public Class User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name_ID As System.Nullable(Of Integer)
		
		Private _UserName As String
		
		Private _Password As String
		
		Private _CanDelete As Boolean
		
		Private _CanRead As Boolean
		
		Private _CanAdd As Boolean
		
		Private _CanDeposit As Boolean
		
		Private _CanDraw As Boolean
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _RegDate As Date
		
		Private _Note As String
		
		Private _IsAdmin As Boolean
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Families As EntitySet(Of Family)
		
		Private _Fathers As EntitySet(Of Father)
		
		Private _Mothers As EntitySet(Of Mother)
		
		Private _BondsMans As EntitySet(Of BondsMan)
		
		Private _Supporters As EntitySet(Of Supporter)
		
		Private _Boxes As EntitySet(Of Box)
		
		Private _Bills As EntitySet(Of Bill)
		
		Private _Bails As EntitySet(Of Bail)
		
		Private _Transforms As EntitySet(Of Transform)
		
		Private _UnOrphans As EntitySet(Of UnOrphan)
		
		Private _Name As EntityRef(Of Name)
		
		Private _Address As EntityRef(Of Address)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnName_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnCanDeleteChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanDeleteChanged()
    End Sub
    Partial Private Sub OnCanReadChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanReadChanged()
    End Sub
    Partial Private Sub OnCanAddChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanAddChanged()
    End Sub
    Partial Private Sub OnCanDepositChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanDepositChanged()
    End Sub
    Partial Private Sub OnCanDrawChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanDrawChanged()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnIsAdminChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAdminChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Families = New EntitySet(Of Family)(AddressOf Me.attach_Families, AddressOf Me.detach_Families)
			Me._Fathers = New EntitySet(Of Father)(AddressOf Me.attach_Fathers, AddressOf Me.detach_Fathers)
			Me._Mothers = New EntitySet(Of Mother)(AddressOf Me.attach_Mothers, AddressOf Me.detach_Mothers)
			Me._BondsMans = New EntitySet(Of BondsMan)(AddressOf Me.attach_BondsMans, AddressOf Me.detach_BondsMans)
			Me._Supporters = New EntitySet(Of Supporter)(AddressOf Me.attach_Supporters, AddressOf Me.detach_Supporters)
			Me._Boxes = New EntitySet(Of Box)(AddressOf Me.attach_Boxes, AddressOf Me.detach_Boxes)
			Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
			Me._Bails = New EntitySet(Of Bail)(AddressOf Me.attach_Bails, AddressOf Me.detach_Bails)
			Me._Transforms = New EntitySet(Of Transform)(AddressOf Me.attach_Transforms, AddressOf Me.detach_Transforms)
			Me._UnOrphans = New EntitySet(Of UnOrphan)(AddressOf Me.attach_UnOrphans, AddressOf Me.detach_UnOrphans)
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name_ID")>  _
		Public Property Name_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Name_ID
			End Get
			Set
				If (Me._Name_ID.Equals(value) = false) Then
					If Me._Name.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", CanBeNull:=false)>  _
		Public Property UserName() As String
			Get
				Return Me._UserName
			End Get
			Set
				If (String.Equals(Me._UserName, value) = false) Then
					Me.OnUserNameChanging(value)
					Me.SendPropertyChanging
					Me._UserName = value
					Me.SendPropertyChanged("UserName")
					Me.OnUserNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", CanBeNull:=false)>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanDelete")>  _
		Public Property CanDelete() As Boolean
			Get
				Return Me._CanDelete
			End Get
			Set
				If ((Me._CanDelete = value)  _
							= false) Then
					Me.OnCanDeleteChanging(value)
					Me.SendPropertyChanging
					Me._CanDelete = value
					Me.SendPropertyChanged("CanDelete")
					Me.OnCanDeleteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanRead")>  _
		Public Property CanRead() As Boolean
			Get
				Return Me._CanRead
			End Get
			Set
				If ((Me._CanRead = value)  _
							= false) Then
					Me.OnCanReadChanging(value)
					Me.SendPropertyChanging
					Me._CanRead = value
					Me.SendPropertyChanged("CanRead")
					Me.OnCanReadChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanAdd")>  _
		Public Property CanAdd() As Boolean
			Get
				Return Me._CanAdd
			End Get
			Set
				If ((Me._CanAdd = value)  _
							= false) Then
					Me.OnCanAddChanging(value)
					Me.SendPropertyChanging
					Me._CanAdd = value
					Me.SendPropertyChanged("CanAdd")
					Me.OnCanAddChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanDeposit")>  _
		Public Property CanDeposit() As Boolean
			Get
				Return Me._CanDeposit
			End Get
			Set
				If ((Me._CanDeposit = value)  _
							= false) Then
					Me.OnCanDepositChanging(value)
					Me.SendPropertyChanging
					Me._CanDeposit = value
					Me.SendPropertyChanged("CanDeposit")
					Me.OnCanDepositChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanDraw")>  _
		Public Property CanDraw() As Boolean
			Get
				Return Me._CanDraw
			End Get
			Set
				If ((Me._CanDraw = value)  _
							= false) Then
					Me.OnCanDrawChanging(value)
					Me.SendPropertyChanging
					Me._CanDraw = value
					Me.SendPropertyChanged("CanDraw")
					Me.OnCanDrawChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAdmin")>  _
		Public Property IsAdmin() As Boolean
			Get
				Return Me._IsAdmin
			End Get
			Set
				If ((Me._IsAdmin = value)  _
							= false) Then
					Me.OnIsAdminChanging(value)
					Me.SendPropertyChanging
					Me._IsAdmin = value
					Me.SendPropertyChanged("IsAdmin")
					Me.OnIsAdminChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Family", Storage:="_Families", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Families() As EntitySet(Of Family)
			Get
				Return Me._Families
			End Get
			Set
				Me._Families.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Father", Storage:="_Fathers", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Fathers() As EntitySet(Of Father)
			Get
				Return Me._Fathers
			End Get
			Set
				Me._Fathers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Mother", Storage:="_Mothers", ThisKey:="ID", OtherKey:="User_Id")>  _
		Public Property Mothers() As EntitySet(Of Mother)
			Get
				Return Me._Mothers
			End Get
			Set
				Me._Mothers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_BondsMan", Storage:="_BondsMans", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property BondsMans() As EntitySet(Of BondsMan)
			Get
				Return Me._BondsMans
			End Get
			Set
				Me._BondsMans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Supporter", Storage:="_Supporters", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Supporters() As EntitySet(Of Supporter)
			Get
				Return Me._Supporters
			End Get
			Set
				Me._Supporters.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Box", Storage:="_Boxes", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Boxes() As EntitySet(Of Box)
			Get
				Return Me._Boxes
			End Get
			Set
				Me._Boxes.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Bill", Storage:="_Bills", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Bills() As EntitySet(Of Bill)
			Get
				Return Me._Bills
			End Get
			Set
				Me._Bills.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Bail", Storage:="_Bails", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Bails() As EntitySet(Of Bail)
			Get
				Return Me._Bails
			End Get
			Set
				Me._Bails.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Transform", Storage:="_Transforms", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property Transforms() As EntitySet(Of Transform)
			Get
				Return Me._Transforms
			End Get
			Set
				Me._Transforms.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UnOrphan", Storage:="_UnOrphans", ThisKey:="ID", OtherKey:="User_ID")>  _
		Public Property UnOrphans() As EntitySet(Of UnOrphan)
			Get
				Return Me._UnOrphans
			End Get
			Set
				Me._UnOrphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_User", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.Users.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Users.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_User", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Users.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Users.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Fathers(ByVal entity As Father)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Fathers(ByVal entity As Father)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Mothers(ByVal entity As Mother)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_BondsMans(ByVal entity As BondsMan)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Boxes(ByVal entity As Box)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Boxes(ByVal entity As Box)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_Transforms(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Transforms(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
		
		Private Sub attach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_UnOrphans(ByVal entity As UnOrphan)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Boxes")>  _
	Partial Public Class Box
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name As String
		
		Private _Currency_Name As String
		
		Private _Currency_Short As String
		
		Private _Amount As Decimal
		
		Private _Is_Positive As Boolean
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Supporters As EntitySet(Of Supporter)
		
		Private _Bills As EntitySet(Of Bill)
		
		Private _Bails As EntitySet(Of Bail)
		
		Private _Transforms As EntitySet(Of Transform)
		
		Private _Transforms1 As EntitySet(Of Transform)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCurrency_NameChanging(value As String)
    End Sub
    Partial Private Sub OnCurrency_NameChanged()
    End Sub
    Partial Private Sub OnCurrency_ShortChanging(value As String)
    End Sub
    Partial Private Sub OnCurrency_ShortChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnIs_PositiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_PositiveChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Supporters = New EntitySet(Of Supporter)(AddressOf Me.attach_Supporters, AddressOf Me.detach_Supporters)
			Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
			Me._Bails = New EntitySet(Of Bail)(AddressOf Me.attach_Bails, AddressOf Me.detach_Bails)
			Me._Transforms = New EntitySet(Of Transform)(AddressOf Me.attach_Transforms, AddressOf Me.detach_Transforms)
			Me._Transforms1 = New EntitySet(Of Transform)(AddressOf Me.attach_Transforms1, AddressOf Me.detach_Transforms1)
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Cur_Name", Storage:="_Currency_Name", CanBeNull:=false)>  _
		Public Property Currency_Name() As String
			Get
				Return Me._Currency_Name
			End Get
			Set
				If (String.Equals(Me._Currency_Name, value) = false) Then
					Me.OnCurrency_NameChanging(value)
					Me.SendPropertyChanging
					Me._Currency_Name = value
					Me.SendPropertyChanged("Currency_Name")
					Me.OnCurrency_NameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Cur_Short", Storage:="_Currency_Short", CanBeNull:=false)>  _
		Public Property Currency_Short() As String
			Get
				Return Me._Currency_Short
			End Get
			Set
				If (String.Equals(Me._Currency_Short, value) = false) Then
					Me.OnCurrency_ShortChanging(value)
					Me.SendPropertyChanging
					Me._Currency_Short = value
					Me.SendPropertyChanged("Currency_Short")
					Me.OnCurrency_ShortChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="AMount", Storage:="_Amount")>  _
		Public Property Amount() As Decimal
			Get
				Return Me._Amount
			End Get
			Set
				If ((Me._Amount = value)  _
							= false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is_Positive")>  _
		Public Property Is_Positive() As Boolean
			Get
				Return Me._Is_Positive
			End Get
			Set
				If ((Me._Is_Positive = value)  _
							= false) Then
					Me.OnIs_PositiveChanging(value)
					Me.SendPropertyChanging
					Me._Is_Positive = value
					Me.SendPropertyChanged("Is_Positive")
					Me.OnIs_PositiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Supporter", Storage:="_Supporters", ThisKey:="ID", OtherKey:="Box_ID")>  _
		Public Property Supporters() As EntitySet(Of Supporter)
			Get
				Return Me._Supporters
			End Get
			Set
				Me._Supporters.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Bill", Storage:="_Bills", ThisKey:="ID", OtherKey:="Box_ID")>  _
		Public Property Bills() As EntitySet(Of Bill)
			Get
				Return Me._Bills
			End Get
			Set
				Me._Bills.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Bail", Storage:="_Bails", ThisKey:="ID", OtherKey:="Box_ID")>  _
		Public Property Bails() As EntitySet(Of Bail)
			Get
				Return Me._Bails
			End Get
			Set
				Me._Bails.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Transform", Storage:="_Transforms", ThisKey:="ID", OtherKey:="SourceBox_ID")>  _
		Public Property Transforms() As EntitySet(Of Transform)
			Get
				Return Me._Transforms
			End Get
			Set
				Me._Transforms.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Transform1", Storage:="_Transforms1", ThisKey:="ID", OtherKey:="DestinationBox_ID")>  _
		Public Property Transforms1() As EntitySet(Of Transform)
			Get
				Return Me._Transforms1
			End Get
			Set
				Me._Transforms1.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Box", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Boxes.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Boxes.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Box = Me
		End Sub
		
		Private Sub detach_Supporters(ByVal entity As Supporter)
			Me.SendPropertyChanging
			entity.Box = Nothing
		End Sub
		
		Private Sub attach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Box = Me
		End Sub
		
		Private Sub detach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Box = Nothing
		End Sub
		
		Private Sub attach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.Box = Me
		End Sub
		
		Private Sub detach_Bails(ByVal entity As Bail)
			Me.SendPropertyChanging
			entity.Box = Nothing
		End Sub
		
		Private Sub attach_Transforms(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.Box = Me
		End Sub
		
		Private Sub detach_Transforms(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.Box = Nothing
		End Sub
		
		Private Sub attach_Transforms1(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.Box1 = Me
		End Sub
		
		Private Sub detach_Transforms1(ByVal entity As Transform)
			Me.SendPropertyChanging
			entity.Box1 = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Billes")>  _
	Partial Public Class Bill
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Box_ID As Integer
		
		Private _Bail_ID As System.Nullable(Of Integer)
		
		Private _Orphan_ID As System.Nullable(Of Integer)
		
		Private _Family_ID As System.Nullable(Of Integer)
		
		Private _Amount As Decimal
		
		Private _IsDeposite As Boolean
		
		Private _Photo() As Byte
		
		Private _Bill_Number As System.Nullable(Of ULong)
		
		Private _Name As String
		
		Private _Bill_Date As Date
		
		Private _Details As String
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Bail As EntityRef(Of Bail)
		
		Private _Box As EntityRef(Of Box)
		
		Private _Orphan As EntityRef(Of Orphan)
		
		Private _Family As EntityRef(Of Family)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBox_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBox_IDChanged()
    End Sub
    Partial Private Sub OnBail_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBail_IDChanged()
    End Sub
    Partial Private Sub OnOrphan_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrphan_IDChanged()
    End Sub
    Partial Private Sub OnFamily_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFamily_IDChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnIsDepositeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDepositeChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnBill_NumberChanging(value As System.Nullable(Of ULong))
    End Sub
    Partial Private Sub OnBill_NumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnBill_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnBill_DateChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Bail = CType(Nothing, EntityRef(Of Bail))
			Me._Box = CType(Nothing, EntityRef(Of Box))
			Me._Orphan = CType(Nothing, EntityRef(Of Orphan))
			Me._Family = CType(Nothing, EntityRef(Of Family))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Box_ID")>  _
		Public Property Box_ID() As Integer
			Get
				Return Me._Box_ID
			End Get
			Set
				If ((Me._Box_ID = value)  _
							= false) Then
					If Me._Box.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBox_IDChanging(value)
					Me.SendPropertyChanging
					Me._Box_ID = value
					Me.SendPropertyChanged("Box_ID")
					Me.OnBox_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Bail_Id", Storage:="_Bail_ID")>  _
		Public Property Bail_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Bail_ID
			End Get
			Set
				If (Me._Bail_ID.Equals(value) = false) Then
					Me.OnBail_IDChanging(value)
					Me.SendPropertyChanging
					Me._Bail_ID = value
					Me.SendPropertyChanged("Bail_ID")
					Me.OnBail_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orphan_ID")>  _
		Public Property Orphan_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Orphan_ID
			End Get
			Set
				If (Me._Orphan_ID.Equals(value) = false) Then
					If Me._Orphan.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrphan_IDChanging(value)
					Me.SendPropertyChanging
					Me._Orphan_ID = value
					Me.SendPropertyChanged("Orphan_ID")
					Me.OnOrphan_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Family_ID")>  _
		Public Property Family_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Family_ID
			End Get
			Set
				If (Me._Family_ID.Equals(value) = false) Then
					If Me._Family.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFamily_IDChanging(value)
					Me.SendPropertyChanging
					Me._Family_ID = value
					Me.SendPropertyChanged("Family_ID")
					Me.OnFamily_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount")>  _
		Public Property Amount() As Decimal
			Get
				Return Me._Amount
			End Get
			Set
				If ((Me._Amount = value)  _
							= false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeposite")>  _
		Public Property IsDeposite() As Boolean
			Get
				Return Me._IsDeposite
			End Get
			Set
				If ((Me._IsDeposite = value)  _
							= false) Then
					Me.OnIsDepositeChanging(value)
					Me.SendPropertyChanging
					Me._IsDeposite = value
					Me.SendPropertyChanged("IsDeposite")
					Me.OnIsDepositeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="varbinary(MAX)")>  _
		Public Property Photo() As Byte()
			Get
				Return Me._Photo
			End Get
			Set
				If (Object.Equals(Me._Photo, value) = false) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bill_Number")>  _
		Public Property Bill_Number() As System.Nullable(Of ULong)
			Get
				Return Me._Bill_Number
			End Get
			Set
				If (Me._Bill_Number.Equals(value) = false) Then
					Me.OnBill_NumberChanging(value)
					Me.SendPropertyChanging
					Me._Bill_Number = value
					Me.SendPropertyChanged("Bill_Number")
					Me.OnBill_NumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bill_Date")>  _
		Public Property Bill_Date() As Date
			Get
				Return Me._Bill_Date
			End Get
			Set
				If ((Me._Bill_Date = value)  _
							= false) Then
					Me.OnBill_DateChanging(value)
					Me.SendPropertyChanging
					Me._Bill_Date = value
					Me.SendPropertyChanged("Bill_Date")
					Me.OnBill_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details")>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Bill", Storage:="_Bail", ThisKey:="Bail_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Bail() As Bail
			Get
				Return Me._Bail.Entity
			End Get
			Set
				Dim previousValue As Bail = Me._Bail.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Bail.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Bail.Entity = Nothing
						previousValue.Bills.Remove(Me)
					End If
					Me._Bail.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bills.Add(Me)
						Me._Bail_ID = value.ID
					Else
						Me._Bail_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Bail")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Bill", Storage:="_Box", ThisKey:="Box_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Box() As Box
			Get
				Return Me._Box.Entity
			End Get
			Set
				Dim previousValue As Box = Me._Box.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Box.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Box.Entity = Nothing
						previousValue.Bills.Remove(Me)
					End If
					Me._Box.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bills.Add(Me)
						Me._Box_ID = value.ID
					Else
						Me._Box_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Box")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Orphan_Bill", Storage:="_Orphan", ThisKey:="Orphan_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Orphan() As Orphan
			Get
				Return Me._Orphan.Entity
			End Get
			Set
				Dim previousValue As Orphan = Me._Orphan.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Orphan.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Orphan.Entity = Nothing
						previousValue.Bills.Remove(Me)
					End If
					Me._Orphan.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bills.Add(Me)
						Me._Orphan_ID = value.ID
					Else
						Me._Orphan_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Orphan")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_Bill", Storage:="_Family", ThisKey:="Family_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Family() As Family
			Get
				Return Me._Family.Entity
			End Get
			Set
				Dim previousValue As Family = Me._Family.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Family.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Family.Entity = Nothing
						previousValue.Bills.Remove(Me)
					End If
					Me._Family.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bills.Add(Me)
						Me._Family_ID = value.ID
					Else
						Me._Family_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Family")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Bill", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Bills.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bills.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Bails")>  _
	Partial Public Class Bail
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Supporter_ID As System.Nullable(Of Integer)
		
		Private _Amount As Decimal
		
		Private _Box_ID As Integer
		
		Private _Is_Family As Boolean
		
		Private _Start_Date As System.Nullable(Of Date)
		
		Private _End_Date As System.Nullable(Of Date)
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Is_Ended As Boolean
		
		Private _IsMonthly As Boolean
		
		Private _Orphans As EntitySet(Of Orphan)
		
		Private _Families As EntitySet(Of Family)
		
		Private _Bills As EntitySet(Of Bill)
		
		Private _Supporter As EntityRef(Of Supporter)
		
		Private _Box As EntityRef(Of Box)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSupporter_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupporter_IDChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnBox_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBox_IDChanged()
    End Sub
    Partial Private Sub OnIs_FamilyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_FamilyChanged()
    End Sub
    Partial Private Sub OnStart_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStart_DateChanged()
    End Sub
    Partial Private Sub OnEnd_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEnd_DateChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnIs_EndedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_EndedChanged()
    End Sub
    Partial Private Sub OnIsMonthlyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMonthlyChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orphans = New EntitySet(Of Orphan)(AddressOf Me.attach_Orphans, AddressOf Me.detach_Orphans)
			Me._Families = New EntitySet(Of Family)(AddressOf Me.attach_Families, AddressOf Me.detach_Families)
			Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
			Me._Supporter = CType(Nothing, EntityRef(Of Supporter))
			Me._Box = CType(Nothing, EntityRef(Of Box))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supporter_ID")>  _
		Public Property Supporter_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Supporter_ID
			End Get
			Set
				If (Me._Supporter_ID.Equals(value) = false) Then
					If Me._Supporter.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSupporter_IDChanging(value)
					Me.SendPropertyChanging
					Me._Supporter_ID = value
					Me.SendPropertyChanged("Supporter_ID")
					Me.OnSupporter_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount")>  _
		Public Property Amount() As Decimal
			Get
				Return Me._Amount
			End Get
			Set
				If ((Me._Amount = value)  _
							= false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Box_ID")>  _
		Public Property Box_ID() As Integer
			Get
				Return Me._Box_ID
			End Get
			Set
				If ((Me._Box_ID = value)  _
							= false) Then
					If Me._Box.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBox_IDChanging(value)
					Me.SendPropertyChanging
					Me._Box_ID = value
					Me.SendPropertyChanged("Box_ID")
					Me.OnBox_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is_Family")>  _
		Public Property Is_Family() As Boolean
			Get
				Return Me._Is_Family
			End Get
			Set
				If ((Me._Is_Family = value)  _
							= false) Then
					Me.OnIs_FamilyChanging(value)
					Me.SendPropertyChanging
					Me._Is_Family = value
					Me.SendPropertyChanged("Is_Family")
					Me.OnIs_FamilyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Start_Date")>  _
		Public Property Start_Date() As System.Nullable(Of Date)
			Get
				Return Me._Start_Date
			End Get
			Set
				If (Me._Start_Date.Equals(value) = false) Then
					Me.OnStart_DateChanging(value)
					Me.SendPropertyChanging
					Me._Start_Date = value
					Me.SendPropertyChanged("Start_Date")
					Me.OnStart_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_End_Date")>  _
		Public Property End_Date() As System.Nullable(Of Date)
			Get
				Return Me._End_Date
			End Get
			Set
				If (Me._End_Date.Equals(value) = false) Then
					Me.OnEnd_DateChanging(value)
					Me.SendPropertyChanging
					Me._End_Date = value
					Me.SendPropertyChanged("End_Date")
					Me.OnEnd_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is_Ended")>  _
		Public Property Is_Ended() As Boolean
			Get
				Return Me._Is_Ended
			End Get
			Set
				If ((Me._Is_Ended = value)  _
							= false) Then
					Me.OnIs_EndedChanging(value)
					Me.SendPropertyChanging
					Me._Is_Ended = value
					Me.SendPropertyChanged("Is_Ended")
					Me.OnIs_EndedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMonthly")>  _
		Public Property IsMonthly() As Boolean
			Get
				Return Me._IsMonthly
			End Get
			Set
				If ((Me._IsMonthly = value)  _
							= false) Then
					Me.OnIsMonthlyChanging(value)
					Me.SendPropertyChanging
					Me._IsMonthly = value
					Me.SendPropertyChanged("IsMonthly")
					Me.OnIsMonthlyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Orphan", Storage:="_Orphans", ThisKey:="ID", OtherKey:="Bail_ID")>  _
		Public Property Orphans() As EntitySet(Of Orphan)
			Get
				Return Me._Orphans
			End Get
			Set
				Me._Orphans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Family", Storage:="_Families", ThisKey:="ID", OtherKey:="Baild_ID")>  _
		Public Property Families() As EntitySet(Of Family)
			Get
				Return Me._Families
			End Get
			Set
				Me._Families.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bail_Bill", Storage:="_Bills", ThisKey:="ID", OtherKey:="Bail_ID")>  _
		Public Property Bills() As EntitySet(Of Bill)
			Get
				Return Me._Bills
			End Get
			Set
				Me._Bills.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supporter_Bail", Storage:="_Supporter", ThisKey:="Supporter_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Supporter() As Supporter
			Get
				Return Me._Supporter.Entity
			End Get
			Set
				Dim previousValue As Supporter = Me._Supporter.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Supporter.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Supporter.Entity = Nothing
						previousValue.Bails.Remove(Me)
					End If
					Me._Supporter.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bails.Add(Me)
						Me._Supporter_ID = value.ID
					Else
						Me._Supporter_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Supporter")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Bail", Storage:="_Box", ThisKey:="Box_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Box() As Box
			Get
				Return Me._Box.Entity
			End Get
			Set
				Dim previousValue As Box = Me._Box.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Box.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Box.Entity = Nothing
						previousValue.Bails.Remove(Me)
					End If
					Me._Box.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bails.Add(Me)
						Me._Box_ID = value.ID
					Else
						Me._Box_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Box")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Bail", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Bails.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bails.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Bail = Me
		End Sub
		
		Private Sub detach_Orphans(ByVal entity As Orphan)
			Me.SendPropertyChanging
			entity.Bail = Nothing
		End Sub
		
		Private Sub attach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Bail = Me
		End Sub
		
		Private Sub detach_Families(ByVal entity As Family)
			Me.SendPropertyChanging
			entity.Bail = Nothing
		End Sub
		
		Private Sub attach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Bail = Me
		End Sub
		
		Private Sub detach_Bills(ByVal entity As Bill)
			Me.SendPropertyChanging
			entity.Bail = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Transforms")>  _
	Partial Public Class Transform
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _SourceBox_ID As Integer
		
		Private _DestinationBox_ID As Integer
		
		Private _Source_Amount As Decimal
		
		Private _Des_Amount As Decimal
		
		Private _Tranc_Price As Decimal
		
		Private _Photo() As Byte
		
		Private _Details As String
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Tranc_Number As System.Nullable(Of ULong)
		
		Private _Tranc_Date As Date
		
		Private _Box As EntityRef(Of Box)
		
		Private _Box1 As EntityRef(Of Box)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSourceBox_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceBox_IDChanged()
    End Sub
    Partial Private Sub OnDestinationBox_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDestinationBox_IDChanged()
    End Sub
    Partial Private Sub OnSource_AmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSource_AmountChanged()
    End Sub
    Partial Private Sub OnDes_AmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDes_AmountChanged()
    End Sub
    Partial Private Sub OnTranc_PriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTranc_PriceChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnTranc_NumberChanging(value As System.Nullable(Of ULong))
    End Sub
    Partial Private Sub OnTranc_NumberChanged()
    End Sub
    Partial Private Sub OnTranc_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnTranc_DateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Box = CType(Nothing, EntityRef(Of Box))
			Me._Box1 = CType(Nothing, EntityRef(Of Box))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="SourceBox_Id", Storage:="_SourceBox_ID")>  _
		Public Property SourceBox_ID() As Integer
			Get
				Return Me._SourceBox_ID
			End Get
			Set
				If ((Me._SourceBox_ID = value)  _
							= false) Then
					Me.OnSourceBox_IDChanging(value)
					Me.SendPropertyChanging
					Me._SourceBox_ID = value
					Me.SendPropertyChanged("SourceBox_ID")
					Me.OnSourceBox_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationBox_ID")>  _
		Public Property DestinationBox_ID() As Integer
			Get
				Return Me._DestinationBox_ID
			End Get
			Set
				If ((Me._DestinationBox_ID = value)  _
							= false) Then
					If Me._Box1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDestinationBox_IDChanging(value)
					Me.SendPropertyChanging
					Me._DestinationBox_ID = value
					Me.SendPropertyChanged("DestinationBox_ID")
					Me.OnDestinationBox_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source_Amount")>  _
		Public Property Source_Amount() As Decimal
			Get
				Return Me._Source_Amount
			End Get
			Set
				If ((Me._Source_Amount = value)  _
							= false) Then
					Me.OnSource_AmountChanging(value)
					Me.SendPropertyChanging
					Me._Source_Amount = value
					Me.SendPropertyChanged("Source_Amount")
					Me.OnSource_AmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Destination_Amount", Storage:="_Des_Amount")>  _
		Public Property Des_Amount() As Decimal
			Get
				Return Me._Des_Amount
			End Get
			Set
				If ((Me._Des_Amount = value)  _
							= false) Then
					Me.OnDes_AmountChanging(value)
					Me.SendPropertyChanging
					Me._Des_Amount = value
					Me.SendPropertyChanged("Des_Amount")
					Me.OnDes_AmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tranc_Price")>  _
		Public Property Tranc_Price() As Decimal
			Get
				Return Me._Tranc_Price
			End Get
			Set
				If ((Me._Tranc_Price = value)  _
							= false) Then
					Me.OnTranc_PriceChanging(value)
					Me.SendPropertyChanging
					Me._Tranc_Price = value
					Me.SendPropertyChanged("Tranc_Price")
					Me.OnTranc_PriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="varbinary(MAX)")>  _
		Public Property Photo() As Byte()
			Get
				Return Me._Photo
			End Get
			Set
				If (Object.Equals(Me._Photo, value) = false) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details")>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Tranc_Numb", Storage:="_Tranc_Number")>  _
		Public Property Tranc_Number() As System.Nullable(Of ULong)
			Get
				Return Me._Tranc_Number
			End Get
			Set
				If (Me._Tranc_Number.Equals(value) = false) Then
					Me.OnTranc_NumberChanging(value)
					Me.SendPropertyChanging
					Me._Tranc_Number = value
					Me.SendPropertyChanged("Tranc_Number")
					Me.OnTranc_NumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tranc_Date")>  _
		Public Property Tranc_Date() As Date
			Get
				Return Me._Tranc_Date
			End Get
			Set
				If ((Me._Tranc_Date = value)  _
							= false) Then
					Me.OnTranc_DateChanging(value)
					Me.SendPropertyChanging
					Me._Tranc_Date = value
					Me.SendPropertyChanged("Tranc_Date")
					Me.OnTranc_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Transform", Storage:="_Box", ThisKey:="SourceBox_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Box() As Box
			Get
				Return Me._Box.Entity
			End Get
			Set
				Dim previousValue As Box = Me._Box.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Box.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Box.Entity = Nothing
						previousValue.Transforms.Remove(Me)
					End If
					Me._Box.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Transforms.Add(Me)
						Me._SourceBox_ID = value.ID
					Else
						Me._SourceBox_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Box")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Box_Transform1", Storage:="_Box1", ThisKey:="DestinationBox_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Box1() As Box
			Get
				Return Me._Box1.Entity
			End Get
			Set
				Dim previousValue As Box = Me._Box1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Box1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Box1.Entity = Nothing
						previousValue.Transforms1.Remove(Me)
					End If
					Me._Box1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Transforms1.Add(Me)
						Me._DestinationBox_ID = value.ID
					Else
						Me._DestinationBox_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Box1")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Transform", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Transforms.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Transforms.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="UnOrphans")>  _
	Partial Public Class UnOrphan
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer = CType(Nothing, Integer)
		
		Private _Name_ID As Integer
		
		Private _Address_ID As System.Nullable(Of Integer)
		
		Private _Family_ID As Integer
		
		Private _Jop As String
		
		Private _IsMarried As Boolean
		
		Private _IsDead As Boolean
		
		Private _Birthday As Date
		
		Private _Dieday As System.Nullable(Of Date)
		
		Private _Salary As System.Nullable(Of Decimal)
		
		Private _Photo() As Byte
		
		Private _Note As String
		
		Private _User_ID As Integer
		
		Private _RegDate As Date
		
		Private _Name As EntityRef(Of Name)
		
		Private _Address As EntityRef(Of Address)
		
		Private _Family As EntityRef(Of Family)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnName_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnName_IDChanged()
    End Sub
    Partial Private Sub OnAddress_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAddress_IDChanged()
    End Sub
    Partial Private Sub OnFamily_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFamily_IDChanged()
    End Sub
    Partial Private Sub OnJopChanging(value As String)
    End Sub
    Partial Private Sub OnJopChanged()
    End Sub
    Partial Private Sub OnIsMarriedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMarriedChanged()
    End Sub
    Partial Private Sub OnIsDeadChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeadChanged()
    End Sub
    Partial Private Sub OnBirthdayChanging(value As Date)
    End Sub
    Partial Private Sub OnBirthdayChanged()
    End Sub
    Partial Private Sub OnDiedayChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDiedayChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As Byte())
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Name = CType(Nothing, EntityRef(Of Name))
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._Family = CType(Nothing, EntityRef(Of Family))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public ReadOnly Property ID() As Integer
			Get
				Return Me._ID
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="NameID", Storage:="_Name_ID")>  _
		Public Property Name_ID() As Integer
			Get
				Return Me._Name_ID
			End Get
			Set
				If ((Me._Name_ID = value)  _
							= false) Then
					Me.OnName_IDChanging(value)
					Me.SendPropertyChanging
					Me._Name_ID = value
					Me.SendPropertyChanged("Name_ID")
					Me.OnName_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address_ID")>  _
		Public Property Address_ID() As System.Nullable(Of Integer)
			Get
				Return Me._Address_ID
			End Get
			Set
				If (Me._Address_ID.Equals(value) = false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddress_IDChanging(value)
					Me.SendPropertyChanging
					Me._Address_ID = value
					Me.SendPropertyChanged("Address_ID")
					Me.OnAddress_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Family_ID")>  _
		Public Property Family_ID() As Integer
			Get
				Return Me._Family_ID
			End Get
			Set
				If ((Me._Family_ID = value)  _
							= false) Then
					If Me._Family.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFamily_IDChanging(value)
					Me.SendPropertyChanging
					Me._Family_ID = value
					Me.SendPropertyChanged("Family_ID")
					Me.OnFamily_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Jop")>  _
		Public Property Jop() As String
			Get
				Return Me._Jop
			End Get
			Set
				If (String.Equals(Me._Jop, value) = false) Then
					Me.OnJopChanging(value)
					Me.SendPropertyChanging
					Me._Jop = value
					Me.SendPropertyChanged("Jop")
					Me.OnJopChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMarried")>  _
		Public Property IsMarried() As Boolean
			Get
				Return Me._IsMarried
			End Get
			Set
				If ((Me._IsMarried = value)  _
							= false) Then
					Me.OnIsMarriedChanging(value)
					Me.SendPropertyChanging
					Me._IsMarried = value
					Me.SendPropertyChanged("IsMarried")
					Me.OnIsMarriedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDead")>  _
		Public Property IsDead() As Boolean
			Get
				Return Me._IsDead
			End Get
			Set
				If ((Me._IsDead = value)  _
							= false) Then
					Me.OnIsDeadChanging(value)
					Me.SendPropertyChanging
					Me._IsDead = value
					Me.SendPropertyChanged("IsDead")
					Me.OnIsDeadChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthday")>  _
		Public Property Birthday() As Date
			Get
				Return Me._Birthday
			End Get
			Set
				If ((Me._Birthday = value)  _
							= false) Then
					Me.OnBirthdayChanging(value)
					Me.SendPropertyChanging
					Me._Birthday = value
					Me.SendPropertyChanged("Birthday")
					Me.OnBirthdayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dieday")>  _
		Public Property Dieday() As System.Nullable(Of Date)
			Get
				Return Me._Dieday
			End Get
			Set
				If (Me._Dieday.Equals(value) = false) Then
					Me.OnDiedayChanging(value)
					Me.SendPropertyChanging
					Me._Dieday = value
					Me.SendPropertyChanged("Dieday")
					Me.OnDiedayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary")>  _
		Public Property Salary() As System.Nullable(Of Decimal)
			Get
				Return Me._Salary
			End Get
			Set
				If (Me._Salary.Equals(value) = false) Then
					Me.OnSalaryChanging(value)
					Me.SendPropertyChanging
					Me._Salary = value
					Me.SendPropertyChanged("Salary")
					Me.OnSalaryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="varbinary(MAX)")>  _
		Public Property Photo() As Byte()
			Get
				Return Me._Photo
			End Get
			Set
				If (Object.Equals(Me._Photo, value) = false) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID")>  _
		Public Property User_ID() As Integer
			Get
				Return Me._User_ID
			End Get
			Set
				If ((Me._User_ID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUser_IDChanging(value)
					Me.SendPropertyChanging
					Me._User_ID = value
					Me.SendPropertyChanged("User_ID")
					Me.OnUser_IDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate")>  _
		Public Property RegDate() As Date
			Get
				Return Me._RegDate
			End Get
			Set
				If ((Me._RegDate = value)  _
							= false) Then
					Me.OnRegDateChanging(value)
					Me.SendPropertyChanging
					Me._RegDate = value
					Me.SendPropertyChanged("RegDate")
					Me.OnRegDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Name_UnOrphan", Storage:="_Name", ThisKey:="Name_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Name() As Name
			Get
				Return Me._Name.Entity
			End Get
			Set
				Dim previousValue As Name = Me._Name.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Name.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Name.Entity = Nothing
						previousValue.UnOrphans.Remove(Me)
					End If
					Me._Name.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UnOrphans.Add(Me)
						Me._Name_ID = value.ID
					Else
						Me._Name_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Name")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_UnOrphan", Storage:="_Address", ThisKey:="Address_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.UnOrphans.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UnOrphans.Add(Me)
						Me._Address_ID = value.ID
					Else
						Me._Address_ID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Family_UnOrphan", Storage:="_Family", ThisKey:="Family_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Family() As Family
			Get
				Return Me._Family.Entity
			End Get
			Set
				Dim previousValue As Family = Me._Family.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Family.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Family.Entity = Nothing
						previousValue.UnOrphans.Remove(Me)
					End If
					Me._Family.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UnOrphans.Add(Me)
						Me._Family_ID = value.ID
					Else
						Me._Family_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Family")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UnOrphan", Storage:="_User", ThisKey:="User_ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.UnOrphans.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UnOrphans.Add(Me)
						Me._User_ID = value.ID
					Else
						Me._User_ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
